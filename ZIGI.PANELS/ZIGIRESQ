)Attr
 $ type(output) caps(off)
 _ type(input)  caps(on ) hilite(uscore) intens(low)
 # type(input)  caps(on) hilite(uscore) intens(low)
)Body Window(61,12)
+
+Recover a historical level of:
$relement
+
+Enter the recovery dataset:
_rdsn                                                      +
+
+Allocate Recovery dataset if it does not exist:#z+(Y or N)
+
+Confirm Recovery:#z+(Y or N)
+
+Press%Enter+to continue or%F3+to Cancel.
)Init
 &zwinttl = 'zigi History Recovery'
 .zvars = '(ralc rans)'
 .CURSOR = RDSN
 &rover = &Z
)Proc
 &resp = .resp
*rexx(* rdsn zedsmsg zedlmsg resp rover csr rans ralc)
  if resp = 'END' then exit
  parse value '' with zedsmsg zedlmsg csr null
  msgvalue = msg()              /* Save the current TSO Message State */
  call msg 'off'                /* Turn off TSO Messages */
  if rover /= 1 then
  if relement = rdsn then do
    rans = null
    rover = 1
    zedsmsg = 'Warning.'
    zedlmsg = 'You are about to overlay the active element. You must confirm' ,
      'a second time if you wish to proceed.'
    csr = 'RDSN'
  end
  if zedsmsg = null then do
    if left(rdsn,1) = '/' then do
      zedsmsg = 'Error.'
      zedlmsg = 'Recovery of history OMVS files is not supported at this time.'
      csr = 'RDSN'
    end
  end
  if zedsmsg = null then
  if ralc = 'Y' then do
    x = listdsi(relement)
    if sysdsorg = 'PO' then
    if pos('(',rdsn) = 0 then do
      zedsmsg = 'Error.'
      zedlmsg = 'The source dataset is a PDS and thus the recovery' ,
        'dataset must be a PDS. A member name is required. Try again.'
      csr = 'RDSN'
    end
  end
  if zedsmsg = null then
  if ralc = 'N' then do
    x = listdsi(rdsn)
    if x > 0 then do
      zedsmsg = 'Error.'
      zedlmsg = SYSMSGLVL2
      csr = 'RDSN'
    end
  end
  else
  if sysdsorg = 'PO' then if pos('(',rdsn) = 0 then do
    zedsmsg = 'Error.'
    zedlmsg = 'The recovery dataset is a PDS and NO member name' ,
      'was specified - try again.'
    csr = 'RDSN'
  end
  if zedsmsg = null then do
    if pos(rans,'YN') = 0 then do
      zedsmsg = 'Required.'
      zedlmsg = 'Confirm enter Y for Yes or N for No.'
      csr = 'RANS'
    end
    if pos(ralc,'YN') = 0 then do
      zedsmsg = 'Required.'
      zedlmsg = 'Allocate enter Y for Yes or N for No.'
      csr = 'RALC'
    end
  end
  call msg msgvalue             /* Restore TSO Message State */
*Endrexx
 if (&zedsmsg NE &Z)
    .msg = isrz001
   .CURSOR = &csr
 if (&csr NE &Z)
   .CURSOR = &csr
)End
