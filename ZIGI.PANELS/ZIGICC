)Attr
 @ type(input ) caps(off) hilite(uscore) intens(low)
 $ type(input ) caps(on ) hilite(uscore) intens(low)
 _ type( input) intens(low ) just(left ) hilite(uscore)
 # type(output) hilite(reverse) color(turq) caps(off)
)Body Expand(\\)
+Clone Repository+\-\#zigtitle    +\-\----------------
%Command ===>_zcmd                                                            +
+
%Remote Repository: + Git Repository URL
@remote
                                                                         +
+
+Branch Name:       +Specific branch to clone (default is master)
@remotebr                                   +Read Only:$z+(Y or blank)
+
%PREFIX for datasets:    $pdshlq                  + (no quotes)
%Default Push on Commit: $z+                        (Y or N)
+
%Repository Root Directory:   +? to browse OMVS folder structure
@localrep                                                                    +
+
+Repository Name:        @reponame           +      (optional)
+Category for Repository:@zigicat      +            (optional)
+Default Userid set prior to Commit:$defruid +      (or blank)
+
+
                  +Press%Enter+to continue, or%F3+to cancel
)Init
 .help = zigih110
 .zvars = '(readonly defcpush)'
)Reinit
 REFRESH(REMOTE LOCALREP)
)Proc
 &resp = .resp
*REXX(* zedsmsg zedlmsg resp csr)
  zedsmsg = ''
  if resp = 'END' then exit

  if pos(' ',reponame) > 0 then do
    zedsmsg = 'Error'
    zedlmsg = 'The Repository Name may not have blanks. Use a - or _',
              'in place of a blank.'
    csr = 'reponame'
  end

  /* Comment Start
  if zedsmsg = '' then
  if translate(substr(remote,1,4)) = 'HTTP' then do
    zedsmsg = 'Error'
    zedlmsg = 'Only ssh is supported for cloning, using full syntax',
      'ssh://[user@]host.xz[:port]/path/to/repo.git/ or',
      'scp-like syntax [user@]host.xz:path/to/repo.git/'
    csr = 'remote'
  end
     Comment End */
  if word(remote,1) = 'git' then
  if word(remote,2) = 'clone' then
  remote = subword(remote,3)

  if zedsmsg = '' then
  if localrep /= '' then
  if localrep /= '?' then do
    x = bpxwunix('ls -la' localrep,,so.,se.)
    if so.0 = 0 then do
      zedsmsg = 'Error.'
      zedlmsg = localrep 'does not exist. Create it and try again.'
      csr = 'LOCALREP'
    end
    if so.0 > 3 then do
      x = bpxwunix('ls -la' localrep'/.git',,so.,se.)
      if so.0 > 0 then do
        zedsmsg = 'Error.'
        zedlmsg = localrep 'is currently a Git repository and thus' ,
           'not valid for cloning.' ,
          'Change to an empty directory and try again.'
        csr = 'LOCALREP'
      end
    end
  end

  if zedsmsg = '' then
     if translate(substr(remote,1,4)) = 'HTTP' then
        defcpush = 'N'

  if zedsmsg = '' then
  if localrep /= '' then
  if reponame /= '' then do
      x = bpxwunix('ls -la' localrep'/'reponame,,so.,se.)
      if so.0 > 0 then do
        zedsmsg = 'Error.'
        zedlmsg = localrep'/'reponame 'currently exists and is' ,
           'not valid for cloning.'
        csr = 'REPONAME'
    end
  end

  if zedsmsg = '' then
  if length(defruid) = 8 then do
    CVT      = C2D(Storage(10,4))
    TVT      = C2D(Storage(D2X(CVT + 156),4))   /* cvt + 9c */
    TSVTUMXL = C2D(Storage(D2X(tvt  + 6),1))  /* tvt + 6 */
    if tsvtumxl < 8 then do
      zedsmsg = 'Error'
      zedlmsg = defruid 'is 8 characters and this system does not' ,
        'support 8 character TSO userids at this time.'
      csr = 'DEFRUID'
    end
  end

*ENDREXX
 if (&zedsmsg NE &Z)
    .MSG = ISRZ001
    .CURSOR = &CSR
 if (&zedsmsg EQ &Z)
  ver (&remote,nb)
  ver (&localrep,nb)
  ver (&readonly,list,Y)
  ver (&pdshlq,nb,dsname)
  ver (&defcpush,nb,list,Y,N)
  ver (&defruid,dsname)
)end
/* ------------------------------------------------------------- */
/* ZIGI - the z/OS ISPF Git Interface                            */
/* Copyright (C) 2020-2025 GPL V3 - Henri Kuiper and Lionel Dyck */
/* ------------------------------------------------------------- */
