)Attr
 @ type(input ) hilite(uscore) caps(off) intens(low)
 _ type(input ) hilite(uscore) caps(on) intens(low )
 $ type(output) hilite(uscore) caps(off)
 { type(output) intens(low)
 # type(output) hilite(reverse) color(turq) caps(off)
)Body Window(69,8) cmd()
+
+Enter%New HLQ+for the Extract:
_tagxhlq                         +(no quotes allowed)
+
+Enter%New Path+for OMVS Files: (? to be prompted or blank to bypass)
@tagxpath                                             +

      +Press%Enter+to proceed, or%F3+to cancel.
)Init
 &zwinttl = 'ZIGI Extract Prompt'
 .help = zigih2i1
)Proc
 &zerrhm   = 'zigih2i1'
 &zerralrm = 'NO'
 &zerrtp   = 'Notify'
 &zerrsm = &z
 &resp = .resp
 &cloc = tagxhlq
*REXX(* zerrsm zerrlm cloc resp)
  /* check for END or CANCEl */
  if wordpos(resp,'END CANCEL') > 0 then exit
  parse value '' with zerrsm zerrlm null

  /* Validate that the provided hlq does NOT exist */
  if zerrsm = null then do
    if left(tagxhlq,1) = "'"
    then tagxhlq = strip(tagxhlq,'B',"'")
    call outtrap 'x.'
    Address tso "listc level('"tagxhlq"')"
    call outtrap 'off'
    if pos('NOT FOUND',x.1) = 0 then do
      zerrsm = 'Error.'
      zerrlm = 'The HLQ' tagxhlq 'currently exists which is not' ,
        'allowed. Select a new HLQ and try again.'
      cloc = 'tagxhlq'
    end
  end
  /* Validate that the provided tagxpath does NOT exist */
  if zerrsm = null then do
    if tagxpath /= null then do
      if right(tagxpath,1) /= '/'
      then tagxpath = tagxpath'/'
      address syscall readdir tagxpath d.
      if d.0 > 0 then do
        zerrsm = 'Error.'
        zerrlm = 'The path' tagxpath 'currently exists which is not' ,
          'allowed. Enter a new path and try again.'
        cloc = 'tagxpath'
      end
    end
  end
  if tagxpath = '?/' then tagxpath = '?'
*ENDREXX
 ver (&tagxhlq,nb,dsname)
 .cursor = &cloc
 if (&zerrsm NE &Z)
    .msg = isrz003
)end
/* -------------------------------------------------------- */
/* ZIGI - the z/OS ISPF Git Interface                       */
/* Copyright (C) 2020 GPL V3 - Henri Kuiper and Lionel Dyck */
/* -------------------------------------------------------- */
