  /* --------------------  rexx procedure  -------------------- *
  | Name:      zigickot                                        |
  |                                                            |
  | Function:  ZIGI Checkout                                   |
  |                                                            |
  | Syntax:    %zigickot                                       |
  |                                                            |
  | Usage Notes:                                               |
  |            1. ISPF Variables will pass the                 |
  |               - default HLQ to be used                     |
  |            2. The OMVS Directory where the project is      |
  |            3. Sequential files that have no lowercase      |
  |               will be processed.                           |
  |            4. Enq checking will be performed and if fail   |
  |               ispf variable badckot = 1                    |
  |                                                            |
  | Author:    Lionel B. Dyck                                  |
  |                                                            |
  | History:  (most recent on top)                             |
  |            01/06/21 LBD - Ignore files not in .zigi/dsn    |
  |            11/19/20 LBD - Use -T for default cp copies     |
  |                         - Get dovetail directory from ispf |
  |                           variable dovetail                |
  |            11/03/20 LBD - Update for latest putpds syntax  |
  |            10/25/20 LBD - Improved usssafe routine         |
  |            10/21/20 LBD - Check for ispf stats before put  |
  |            10/15/20 LBD - Correct test for enhanced        |
  |            09/27/20 LBD - Add debug support                |
  |            09/26/20 LBD - Support Dovetail PUTPDS          |
  |                           - zigixit0 to get path           |
  |                         - Use putpds when not selective or |
  |                           not LMOD or not mixed bin/text   |
  |            08/08/20 LBD - Allow null ckothlq               |
  |                         - Generalize get_binfiles          |
  |            08/07/20 LBD - Add pfshow off/reset all pops    |
  |            07/29/20 LBD - Add _EDC_ZERO_RECLEN=Y to env.   |
  |            07/16/20 LBD - Correct test for Load Mod msg    |
  |            07/08/20 LBD - Corrections for binary copy      |
  |                           that broke with single cp        |
  |            07/07/20 LBD - Check ENQ's before Alloc/cp      |
  |            06/28/20 LBD - Fix Aopt for indiv member cp     |
  |            06/24/20 LBD - Fix LMOD selective copy          |
  |            06/20/20 LBD - Fix copy counter                 |
  |            06/19/20 LBD - If a PDS is not Text and Binary  |
  |                           (mixed) then do a single cp      |
  |            06/13/20 LBD - Cleanup Allocation Test for PDS  |
  |            06/12/20 LBD - Remove ckotqual (not used)       |
  |            06/10/20 LBD - Add OMVS Environment Variables   |
  |            06/08/20 LBD - Add Parse to arg for is_binfile  |
  |                         - Add Procedure to is_binfile      |
  |            06/07/20 LBD - usssafe omvs directory on cd     |
  |            06/04/20 LBD - Remove obsolete code (git)       |
  |            05/14/20 LBD - Remove (k) from space calc       |
  |                         - Fix omvs files starting with #   |
  |                         - Add progress info on copy        |
  |            05/10/20 LBD - Bug fix in strreplace (null)     |
  |            05/08/20 LBD - Support for Load Libraries       |
  |                           Change OGET to cp                |
  |            03/27/20 LBD - Remove defined extensions an U/C |
  |            03/24/20 LBD - Replace alloc/execio/free with   |
  |                           cat for .zigi/dsn                |
  |            03/11/20 LBD - Check for .zigi before reading   |
  |                           .zigi/dsn                        |
  |            02/23/20 LBD - Make numbers pretty              |
  |            01/24/20 HKB - Really fix it :)                 |
  |            01/23/20 LBD - Fix if user is NOPREFIX          |
  |            01/19/20 LBD - Use ckotqual (required)          |
  |                           * for snapshot                   |
  |            01/18/20 LBD - Convert from individual OGETs    |
  |                           to one OGETX for a PDS if no     |
  |                           selective restores               |
  |            01/14/20 LBD - Incorporate Binary Support       |
  |                         - Correct selective refresh bug    |
  |            01/08/20 LBD - Pass updated mems to zigistat    |
  |                         - Honor mgen config setting for    |
  |                           PDSE member gen allocation       |
  |            01/05/20 LBD - vErase passed variable           |
  |            01/02/20 LBD - Support selective refresh        |
  |                           with ispf var pulldsns           |
  |            12/09/19 LBD - Support (ignore) omvs files and  |
  |                           subdirectories                   |
  |            11/16/19 LBD - Change to use ZIGISTAT routine   |
  |            10/30/19 LBD - Get DCB info from /.zigi/dsn     |
  |            10/28/19 LBD - Support sequential files         |
  |            06/12/19 LBD - Correct to handle a git direcory |
  |            06/11/19 LBD - Add popup status                 |
  |            06/10/19 LBD - Creation                         |
  | ---------------------------------------------------------- |
  |    zigi - the z/OS ISPF Git Interface                      |
  |    Copyright (C) 2020 - Henri Kuiper and Lionel Dyck       |
  |                                                            |
  |    This program is free software: you can redistribute it  |
  |    and/or modify it under the terms of the GNU General     |
  |    Public License as published by the Free Software        |
  |    Foundation, either version 3 of the License, or (at     |
  |    your option) any later version.                         |
  |                                                            |
  |    This program is distributed in the hope that it will be |
  |    useful, but WITHOUT ANY WARRANTY; without even the      |
  |    implied warranty of MERCHANTABILITY or FITNESS FOR A    |
  |    PARTICULAR PURPOSE.  See the GNU General Public License |
  |    for more details.                                       |
  |                                                            |
  |    You should have received a copy of the GNU General      |
  |    Public License along with this program.  If not, see    |
  |    <https://www.gnu.org/licenses/>.                        |
  * ---------------------------------------------------------- */

  /* -------------------------------------------- *
  | Get the ISPF Variables with our instructions |
  * -------------------------------------------- */
  Address ISPExec
  'vget (ckothlq ckotdir pulldsns mgenl debugfil)'
  if datatype(mgen) /= 'NUM' then mgen = 0

  Address TSO

  /* ------------------------------------- *
  | Define bpxwunix Environment Variables |
  * ------------------------------------- */
  env.1 = '_BPX_SHAREAS=YES'
  env.2 = '_BPX_SPAWN_SCRIPT=YES'
  env.3 = '_EDC_ZERO_RECLEN=Y'
  env.0 = 3

  /* ----------------------- *
  | Check for getpds/putpds |
  * ----------------------- */
  Address ISPExec ,
  'vget (dovedir) shared'
  enhanced_cp  = word(dovedir,1)
  dovetail_dir = word(dovedir,2)

  /* -------------------------------------------------------- *
  | Issue the ls command to get file names and sizes for all |
  | files in the current directory and sub-directories.      |
  * -------------------------------------------------------- */
  cmd = 'ls -laRk' ckotdir
  rc = bpxwunix(cmd,,stdout.,stderr.,env.)

  /* ---------------------------------------------- *
  | Display any error messages and if so then exit |
  * ---------------------------------------------- */
  if stderr.0 > 0 then do
    do i = 1 to stderr.0
      say stderr.i
    end
    exit 8
  end

  /* ------------------------- *
  | Define our work variables |
  * ------------------------- */
  parse value '' with subs files null pullmems.
  hit = 0

  /* ------------------------------------ *
  | Read in ../.zigi/dsn to get dcb info |
  * ------------------------------------ */
  cmd = 'cd' ckotdir '&& ls -la .zigi'
  x = bpxwunix(cmd,,co.,ce.,env.)
  if x > 0 then do
    def_recfm = 'FB'
    def_lrecl = 80
    def_blksize = 32720
    def. = null
  end
  else do
    call outtrap 'x.'
    ckdd = 'ck'time('s')
    if sysvar('syspref') = null then pref = sysvar('sysuid')
    else pref = sysvar('syspref')
    x = bpxwunix("cat '"ckotdir"/.zigi/dsn'",,ck.,,env.)
    def. = null
    zdsn. = null
    call outtrap 'off'
    do i = 1 to ck.0
      if left(ck.i,1) = '#' then iterate
      if word(ck.i,1) = '*' then do
        parse value ck.i with . def_dsorg def_recfm def_lrecl def_blksize .
      end
      else do
        dsn = word(ck.i,1)          /* dataset name less hlq */
        def.dsn = subword(ck.i,2)   /* dataset dsorg  */
        zdsn.dsn = word(ck.i,6)     /* file extension */
      end
    end
  end

  /* ------------------------------------------------------- *
  | Get a list of all z/OS datasets and then check to       |
  | determine if any are allocated.  If so then return bad. |
  * ------------------------------------------------------- */
  all_dsns = null
  pulldsns = strip(pulldsns)
  do i = 3 to stdout.0
    if strip(stdout.i) = null then leave
    if words(stdout.i) < 9 then iterate
    if left(word(stdout.i,9),1) = '.' then iterate
    file = word(stdout.i,9)
    if def.file = null then iterate
    fx = translate(file,'??????????????????????????', ,
      'abcdefghijklmnopqrstuvwxyz')
    if pos('?',fx) > 0 then iterate
    if pulldsns = null then
    all_dsns = all_dsns file
    if wordpos(file,pulldsns) > 0 then
    all_dsns = all_dsns file
  end
  Address ISPexec
  x = check_enqs(ckothlq all_dsns)
  if x > 0 then do
    badckot = 1
    Address ISPExec ,
      'vput (badckot) shared'
    return 1
  end
  Address TSO

  /* ------------------------------- *
  | Get the list of Binary Datasets |
  * ------------------------------- */
  Address ISPExec 'vget (gitenv) profile'
  call get_binfiles

  /* ---------------------------------------------------- *
  | Process the results of the ls command to:            |
  | 1. collect number of members per sub-directory       |
  | 2. collect bytes count (in k) for each sub-directory |
  | 3. collect info on sequential files                  |
  * ---------------------------------------------------- */
  if stdout.0 > 0 then
  do i = 1 to stdout.0
    select
      when pos(ckotdir,stdout.i) > 0 then do
        parse value stdout.i with (ckotdir)sub':'
        if left(sub,1) = '/' then sub = substr(sub,2)
        if strip(sub) /= '' then do
          size.sub = 0
          dir.sub = 0
          si = 0
          if left(sub,1) /= '.' then do
            if pulldsns = null then subs = subs sub
            else if wordpos(sub,pulldsns) > 0 then do
              subs = subs sub
              wp = wordpos(sub,pulldsns)
              Address ISPExec 'vget (zv'wp')'
              interpret 'mems = zv'wp
              si = si + 1
              if zdsn.sub /= null then do
                ext = '.'zdsn.sub
                if pos(ext,mems) > 0 then do is = 1 to words(mems)
                  parse value word(mems,is) with m'.'.
                  mems = m delword(mems,is,1)
                end
                mems = translate(mems)
              end
              pullmems.sub = mems
              Address ISPExec 'verase zv'wp
            end
          end
        end
      end
      when word(stdout.i,1) = 'total' then do
        hit = hit + 1
      end
      when hit > 1 & left(stdout.i,1) = '-' then
      if strip(sub) /= '' then do
        size.sub = size.sub + word(stdout.i,5)
        dir.sub = dir.sub + 1
      end
      when hit = 1 & left(stdout.i,1) = '-' then do
        file = word(stdout.i,9)
        if left(file,1) = '.' then iterate
        fx = translate(file,'??????????????????????????', ,
          'abcdefghijklmnopqrstuvwxyz')
        if pos('?',fx) > 0 then iterate
        if pulldsns = null then do
          size.file =  word(stdout.i,5)
          files = files file
        end
        if wordpos(file,pulldsns) > 0 then do
          size.file =  word(stdout.i,5)
          files = files file
        end
      end
      otherwise nop
    end
  end

  /* -------------------------------------------- *
  | Process the individual files, if any         |
  | Allocation and Copy                          |
  * -------------------------------------------- */
  do i = 1 to words(files)
    parse value '' with zs1 zs2 zs3 zs4 zs5 zs6 zs7 zs8 zs9
    zs10 = 'Patience while the data is copied from OMVS' ,
      'to the z/OS Dataset.'
    sub = word(files,i)
    fileg = "'"ckothlq""sub"'"
    odir = "'"ckotdir"/"sub"'"
    zs1 = 'Processing file:' sub
    zs2 = 'From:           ' odir
    zs3 = 'To:             ' fileg
    bin = is_binfile(sub)
    if bin = 1 then type = 'Binary'
    else type = 'Text'
    zs7 = 'Type            ' type
    call pop_status
    call outtrap 'x.'
    if sysdsn(fileg) = 'OK' then
    'delete' fileg
    tracks =  (size.sub%50000 + 1) * 2
    call get_dcb
    'alloc ds('fileg') new spa('tracks','tracks') tr dsorg(ps)' ,
      'recfm('recfm') lrecl('lrecl') blksize('blksize')'
    'free ds('fileg')'
    call outtrap 'x.'
    'oget' odir fileg type
    call outtrap 'off'
  end

  /* -------------------------------------------- *
  | Process the sub-directories and initiate the |
  | Allocation and Copy                          |
  | Ignore subdirectories                        |
  * -------------------------------------------- */
  do i = 1 to words(subs)
    parse value '' with zs1 zs2 zs3 zs4 zs5 zs6 zs7 zs8 zs9
    zs10 = 'Patience while the data is copied from OMVS' ,
      'to the z/OS PDS.'
    sub = word(subs,i)
    bin = is_binfile(sub)
    if bin = 1 then type = 'Binary'
    else type = 'Text'
    zs7 = 'Type:                   ' type
    fx = translate(sub,'??????????????????????????', ,
      'abcdefghijklmnopqrstuvwxyz')
    if pos('?',fx) > 0 then iterate
    if pullmems.sub /= null then dir.sub = words(pullmems.sub)
    zs1 = 'Populating from:        ' ckotdir
    zs2 = 'Processing subdirectory:' sub
    zs3 = 'Members:                ' fix_num(dir.sub)
    zs4 = 'Total bytes:            ' fix_num(size.sub)
    tracks =  (size.sub%50000 + 1) * 2
    zs5 = 'Tracks allocated:       ' fix_num(tracks)
    call pop_status
    call alloc_copy_pds
    if recfm /= 'U' then
    call add_stats
  end

  Exit

  /* ----------------------------------------------------- */
  /* number format code thanks to Doug Nadel               */
  /* ----------------------------------------------------- */
fix_num: procedure
  arg bytes
  str=strip(translate('0,123,456,789,abc,def', ,
    right(bytes,16,','), ,
    '0123456789abcdef'),'L',',')
  bytes = strip(str)
  return bytes

  /* ----------------------------------------------------------------- *
  | Allocate the PDS and perform the copy using cp                    |
  | - if the target PDS exists as a PDS, delete and realloc as a PDSE |
  | - if the target is a PDSE then it will NOT be reallocated         |
  | - The target PDS will be allocated as a PDSE version 2.           |
  | - if maxgen (mgen) is provided then member generations will       |
  |   also be defined at allocation                                   |
  | - Uppercase and remove defined extension for members              |
  * ----------------------------------------------------------------- */
Alloc_Copy_PDS:
  pds = "'"ckothlq""sub"'"
  odir = "'"ckotdir"/"sub"/'"
  zs8 = ''
  deleted = 0
  dsnstat = sysdsn(pds)
  if pullmems.sub = null then
  if dsnstat = 'OK' then do
    zs8 = 'Re-Allocating'
    call outtrap 'x.'
    'delete' pds
    deleted = 1
    call outtrap 'off'
  end
  else  zs8 = 'Allocating New'
  zs6 = 'Allocating PDSE:        ' pds
  call pop_status
  if dsnstat /= 'OK' then deleted = 1
  if deleted = 1 then do
    call get_dcb
    if recfm = 'U' then do
      type = 'Load module'
      zs7 = 'Type:                   ' type
    end
    if mgen > 0 then gens = 'maxgens('mgen')'
    else gens = null
    'Alloc new spa('tracks','tracks') recfm('recfm') lrecl('lrecl')' ,
      'Blksize('blksize') Dsntype(Library,2) dsorg(po) dir(1)' ,
      'dsn('pds')' gens
    'Free ds('pds')'
  end
  call pop_status
  /* ---------------------------------------------------- *
  | Read directory to get all member file names and then |
  | adjust according and then do individual cp           |
  * ---------------------------------------------------- */
  x = listdsi(pds)
  recfm = sysrecfm
  target = strip(pds,'B',"'")
  call syscalls 'ON'
  address syscall
  rdir = strip(odir,'B',"'")
  rdir = strip(rdir,'T','/')
  'readdir' rdir 'mems.'
  address ispexec
  call outtrap 'x.'
  mcount = 0
  if pullmems.sub = null
  then tcount = mems.0 - 2
  else tcount = words(pullmems.sub)
  if pullmems.sub = null & check_mixed_bintext(sub) = 0 then do
    if is_binfile(sub) = 1 then do
      binopt = '-B'
      type = 'Binary'
    end
    else do
      binopt = '-T'
      type = 'Text'
    end
    if recfm = 'U' then do
      binopt = '-X -I'
      type = 'Load Module'
    end
    zs9 = 'Copying' tcount 'members.'
    call pop_status
    cmd = 'cp -A -v' binopt rdir'/*' '"//'pds'"'
    if enhanced_cp = 1 then
    if pos('-X',binopt) = 0
    then do
      do xi = 1 to mems.0
        if left(mems.xi,1) /= '.' then leave
      end
      parse value mems.xi with m'.'suf
      if suf /= null
      then rsuf = '/*.'suf
      else rsuf = '/*'
      lp = lastpos('/',rdir)
      dvstat = left(rdir,lp)'.zigi/'substr(rdir,lp+1)
      address syscall 'lstat' dvstat 'dvs.'
      if dvs.0 > 0
      then dvstat_file = '-M st='dvstat',r=y'
      else dvstat_file = '-M r=y'
      if pos('-B',binopt) > 0 then
         dvstat_file = '-b' dvstat_file
      cmd = dovetail_dir'putpds' dvstat_file rdir''rsuf '//'pds
    end
    x = docmd(cmd)

    if x > 0 then call view_std 'B'
    drop so. se.
  end
  else do
    do ii = 1 to mems.0
      if left(mems.ii,1) = "." then iterate
      m = mems.ii    /* ignore the translation */
      aopt = null
      if zdsn.sub /= null then
      if right(m,length(zdsn.sub)) = zdsn.sub then do
        parse value m with m'.'.
        m = translate(m)
        aopt = '-A'
      end
      if pullmems.sub /= null then
      if wordpos(m,pullmems.sub) = 0 then iterate
      src = rdir'/'mems.ii
      bin = is_binfile(sub'/'mems.ii)
      if bin = 1 then binopt = '-B'
      else binopt = '-T'
      if recfm = 'U' then binopt = '-X -I'
      Select
        when pos('-B',binopt) > 0 then type = 'Binary'
        when pos('-X',binopt) > 0 then type = 'Load Module'
        otherwise type = 'Text'
      end
      zs7 = 'Type:                   ' type
      src = usssafe(mems.ii)
      if left(src,1) = '#' then src = '\'src
      zos = usssafe("//'"target"("m")'")
      mcount = mcount + 1
      zs9 = left('Copying' mcount 'of' tcount,24) 'Member:' m
      call pop_status
      cmd = 'cd' usssafe(rdir)
      cmd = cmd '&& cp -v' aopt binopt src '"'zos'"'
      x = docmd(cmd)
      if x > 0 then call view_std 'B'
      Address ISPexec
      zs9 = null
    end
  end
  call syscalls 'OFF'
  call outtrap 'off'
  return

get_dcb:
  if def.sub /= null then do
    parse value def.sub with dsorg recfm lrecl blksize .
    recfm = left(recfm,1) substr(recfm,2,1) substr(recfm,3,1)
  end
  else do
    recfm = left(def_recfm,1) substr(def_recfm,2,1) substr(def_recfm,3,1)
    lrecl = def_lrecl
    blksize = def_blksize
  end
  return

usssafe:
 parse arg safedsn
 if pos('$',safedsn) = 0 then return safedsn
 safe$pos = 1
 do forever
    pos$safe = pos('$',safedsn,safe$pos)
    if pos$safe < 1 then return safedsn
    left$safe = left(safedsn,pos$safe-1)
    right$save = substr(safedsn,pos$safe)
    safedsn = left$safe'\'right$save
    safe$pos = pos$safe + 2
    end
 return safedsn

oldsafe: procedure
  parse arg dsn
  if pos('$',dsn) = 0 then return dsn
  /* Let's not usssafe it twice :) */
  if pos('\$',dsn) > 0 then return dsn
  dsn = strreplace(dsn, '$', '\$')
  return dsn

strreplace: Procedure
  string  = arg(1)
  strfrom = arg(2)
  strto   = arg(3)
  null = ''
  if pos(strfrom,string) = 0 then return string
  newString = null
  do i = 1 to length(string)
    if substr(string,i,1) /= strfrom
    then newstring = newstring''substr(string,i,1)
    else  newstring = newstring''strto
  end
  return newstring

  /* ------------ *
  | PopUp Status |
  * ------------ */
Pop_Status:
  Address ISPExec
  call pfshow 'off'
  'Control Display Lock'
  'Addpop row(3) column(2)'
  'Display Panel(zigipopc)'
  'Rempop'
  call pfshow 'reset'
  Address TSO
  return

  /* ---------------------------------- *
  | Add ISPF Statistics to all Members |
  | - set the initial userid to ZIGI   |
  * ---------------------------------- */
Add_Stats:
  if enhanced_cp = 1 then return
  zs8 = 'Adding/Updating ISPF Statistics'
  call pop_status
  filepath = ckotdir'/.zigi/'sub
  statmems = pullmems.sub
  Address ISPExec 'vput (statmems)'
  '%zigistat' pds filepath 'U'
  return

  /* ------------------------------------------------------ *
  | The pfshow routine will:                               |
  | 1. check to see the passed option                      |
  | 2. if Off then it will save the current pfshow setting |
  |    - save the current setting                          |
  |    - turn off pfshow                                   |
  | 3. if the option is Reset then it will                 |
  |    - test if pfshow was on and turn it back on         |
  * ------------------------------------------------------ */
pfshow:
  arg pfkopt
  if pfkopt = 'RESET' then do
    if pfkeys = 'ON' then
    'select pgm(ispopf) parm(FKA,ON)'
  end
  if pfkopt = 'OFF' then do
    'vget (zpfshow)'
    pfkeys = zpfshow
    if pfkeys /= 'OFF' then
    'select pgm(ispopf) parm(FKA,OFF)'
  end
  return

get_binfiles:
  /* ---------------------------------------------------------\
  | Name:      binfiles                                        |
  |                                                            |
  | Function:  Fills the global binfiles. stem with all        |
  |            current repo files that are added as binary.    |
  \---------------------------------------------------------- */
  cmd = 'cd' ckotdir'/ &&'
  cmd = 'cat -W filecodeset=UTF-8,pgmcodeset=IBM-1047' ckotdir'/.gitattributes'
  cmd = cmd ' | grep BINARY'
  cmd = cmd '| cut -d" " -f1'
  x = docmd(cmd)
  if so.0 = 0 then do
    binfiles.0 = 0
    return 0
  end
  do b = 1 to so.0
    binfiles.b = so.b
  end
  binfiles.0 = so.0
  return 0

is_binfile: procedure expose binfiles.
  /* ---------------------------------------------------------\
  | Name:      is_binfile                                      |
  |                                                            |
  | Function:  Checks the global binfiles. stem for the        |
  |            provided dataset or dataset/member              |
  \---------------------------------------------------------- */
  parse arg file
  if datatype(binfiles.0) /= 'NUM' then return 0
  do bi = 1 to binfiles.0
    if right(binfiles.bi,1) = '*' then do
      parse value file with test'/'.
      if left(binfiles.bi,length(binfiles.bi)-2) = test
      then return 1
    end
    if binfiles.bi = file then return 1
  end
  return 0

docmd:
  parse arg cmd
  drop so. se.
  x = debug('ZIGICKOT:' cmd)
  x = bpxwunix(cmd,,so.,se.,env.)
  return x

  /* ---------------------------------------------------------- *
  | Generalized routine to view stdout. (so.) or stderr. (se.) |
  | based on the parm passed                                   |
  * ---------------------------------------------------------- */
view_std:
  arg stdopt viewopt
  if stdopt = null then viewopt = 'B'
  if viewopt = null then viewopt = 'B'
  if stdopt = 'X' then stdopt = null
  if datatype(so.0) /= 'NUM' then so.0 = 0
  if datatype(se.0) /= 'NUM' then se.0 = 0
  if viewopt = 'B' then if so.0 + se.0 = 0 then return
  /* ------------------------------- *
  | Randomly define a DDName to use |
  * ------------------------------- */
  dd = 'zd'random(9999)
  /* --------------------------------------- *
  | Get lrecl to determine dcb for temp d/s |
  * --------------------------------------- */
  if stdopt /= 'C' then do
    vlrecl = 0
    do li  = 1 to so.0
      so.li = strip(so.li,'T')
      if length(so.li) > vlrecl then vlrecl = length(so.li)
      if so.li = null then so.li = ' '
    end
    do li  = 1 to se.0
      se.li = strip(se.li,'T')
      if length(se.li) > vlrecl then vlrecl = length(se.li)
      if se.li = null then se.li = ' '
    end
    sec = so.0 + se.0
  end
  else do
    do li = 1 to combine.0
      if length(combine.li) > vlrecl then vlrecl = length(combine.li)
    end
    sec = combine.0
  end
  if vlrecl < 81 then vlrecl = 80
  /* ------------------------------------------ *
  | Allocate a temporary data set for our data |
  * ------------------------------------------ */
  Address TSO
  /* calculate space needed with avg 50 bytes per record */
  prim = (((so.0 + se.0) * 50) % 56000) + 1
  if prim < 2 then prim = 5
  if viewopt = 'V' then do
    if sysvar('syspref') = null then pref = userid()'.'
    else pref = null
    vdsn = pref'work.zigi.gitdata'
  end
  else vdsn = null
  x = listdsi(vdsn)
  if x = 0 then do
    call outtrap 'x.'
    'delete' vdsn
    call outtrap 'off'
  end
  if vdsn /= null then vdsnp = 'da('vdsn') unit(3390)'
  else vdsnp = null
  if vlrecl > 255 then vlrecl = 251
  'Alloc f('dd') new spa('prim','prim') tr' ,
    'recfm(v b) lrecl('vlrecl+4') blksize(0)' vdsnp
  /* ----------------------------- *
  | If stdopt is 'B' then do both |
  * ----------------------------- */
  if stdopt /= 'C' then do
    stdopt = null
    sc = so.0
    do xi = 1 to se.0
      sc = sc + 1
      so.sc = se.xi
    end
    so.0 = sc
  end
  /* ----------------------- *
  | Write out the stem data |
  * ----------------------- */
  if stdopt = 'C' then do
    'Execio * diskw' dd '(finis stem combine.'
    drop combine.
    combine.0 = 0
  end
  if stdopt /= 'C' then do
    if stdopt = null
    then do
      'Execio * diskw' dd '(finis stem so.'
    end
    else do
      'Execio * diskw' dd '(finis stem se.'
    end
  end
  /* -------------------------------------------------- *
  | Access the Temporary Data Set using ISPF           |
  | Library Services.                                  |
  | Then using ISPF Browse service to browse the data. |
  | And use Library Services to Free the Data Set.     |
  * -------------------------------------------------- */
  Address ISPExec
  if sec > 0 then if viewopt = 'B' then do
    'lminit dataid(ddb) ddname('dd')'
    'browse dataid('ddb') panel(zigibrow)'
    'lmfree dataid('ddb')'
  end
  else do
    vmac = 'Panel(zigiedit) macro(zigivmac)'
    'view dataset('vdsn')' vmac
    vtitle = null
    'verase vtitle'
  end
  /* ----------------------------- *
  | Last Free the z/OS Allocation |
  * ----------------------------- */
  call outtrap 'x.'
  Address TSO ,
    'Free f('dd')'
  if vdsn /= null then
  Address TSO 'Delete' vdsn
  call outtrap 'off'
  return

  /* ---------------------------------------- *
  | Check if a PDS has mixed binary and text |
  * ---------------------------------------- */
Check_Mixed_BinText:
  parse arg checkForBinFile
  cmbtRC = 0
  if datatype(binfiles.0) /= 'NUM' then return 0
  do bi = 1 to binfiles.0
    parse value binfiles.bi with cmbtfile'/'cmbtmbr
    parse value checkForBinFile with checkFile'/'checkmbr
    if cmbtfile = checkFile then
    if cmbtmbr = '*' then cmbtRC = 0
    else return 1
    if binfiles.bi = checkForBinFile then return 1
  end
  return cmbtRC

  /* --------------------------------------------------------- *
  | Determine is any of the datasets to be updated by pull    |
  | have any outstanding enq's (they are allocated somewhere) |
  |                                                           |
  | If so inform the user and prompt them to release the      |
  | allocation and retry                                      |
  |                                                           |
  | Or abort the pull (not sure how to do that yet)           |
  * --------------------------------------------------------- */
Check_ENQS: Procedure
  arg pdshlq pulldsns
  enq_clean = 1
  /* do until no more enq's or an abort request */
  do until enq_clean = 0
    major = '*'
    minor = pdshlq
    save = 'Z'random(99999)
    if right(minor,1) /= '*' then minor = minor'*'
    "QueryENQ Qname(major) Rname(minor) XSYS Table("save")"
    qrc = rc
    if qrc > 7 then return 0
    if qrc < 8 then do
      'tbquery' save 'rownum(cer)'
      if cer = 0 then do
        'tbend' save
        return 0
      end
      else enq_clean = 1
      if qualignr > 0 then do
        prefix = translate(pdshlq,' ','.')
        prefix = subword(prefix,1,qualignr)
        prefix = translate(prefix,'.',' ')
      end
      else prefix = pdshlq
     /* --------------------------------------- *
      | Remove any datasets not being processed |
      * --------------------------------------- */
      'tbtop' save
      do forever
        'tbskip' save
        if rc > 0 then leave
        hit = 1
        do ice = 1 to words(pulldsns)
          cw = word(pulldsns,ice)
          ckdsn = prefix"."cw
          if ckdsn = zenrname then hit = 0
          if rc > 0 then leave
        end
        if hit = 1 then 'tbdelete' save
      end
      'tbquery' save 'rownum(cer)'
      if cer = 0 then do
        'tbend' save
        return 0
      end
    end
    call pfshow 'off'           /* make sure pfshow is off */
    'addpop row(2) column(2)'
    'tbdispl' save 'panel(zigienqk)'
    'rempop'
    call pfshow 'reset'         /* restore pfshow setting */
    if enqact = 'R' then enq_clean = 1 /* retry */
    else do
      'TBEnd' save
      return 1
    end
    'TBEnd' save
  end
  return 1

debug:
  if debugfil /= null then do
    parse arg msg
    msg = Date() Time()' : 'msg
    c = 'echo "'msg'" >>' debugfil
    x = bpxwunix(c,,dso.,dse.,env.)
  end
  return 0
