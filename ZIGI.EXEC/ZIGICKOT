  /* --------------------  rexx procedure  -------------------- *
  | Name:      zigickot                                        |
  |                                                            |
  | Function:  zigi Checkout                                   |
  |                                                            |
  | Syntax:    %zigickot                                       |
  |                                                            |
  | Usage Notes:                                               |
  |            1. ISPF Variables will pass the                 |
  |               - default HLQ to be used                     |
  |            2. The OMVS Directory where the project is      |
  |            3. Sequential files that have no lowercase      |
  |               will be processed.                           |
  |                                                            |
  | Author:    Lionel B. Dyck                                  |
  |                                                            |
  | History:  (most recent on top)                             |
  |            03/27/20 LBD - Remove defined extensions an U/C |
  |            03/24/20 LBD - Replace alloc/execio/free with   |
  |                           cat for .zigi/dsn                |
  |            03/11/20 LBD - Check for .zigi before reading   |
  |                           .zigi/dsn                        |
  |            02/23/20 LBD - Make numbers pretty              |
  |            01/24/20 HKB - Really fix it :)                 |
  |            01/23/20 LBD - Fix if user is NOPREFIX          |
  |            01/19/20 LBD - Use ckotqual (required)          |
  |                           * for snapshot                   |
  |            01/18/20 LBD - Convert from individual OGETs    |
  |                           to one OGETX for a PDS if no     |
  |                           selective restores               |
  |            01/14/20 LBD - Incorporate Binary Support       |
  |                         - Correct selective refresh bug    |
  |            01/08/20 LBD - Pass updated mems to zigistat    |
  |                         - Honor mgen config setting for    |
  |                           PDSE member gen allocation       |
  |            01/05/20 LBD - vErase passed variable           |
  |            01/02/20 LBD - Support selective refresh        |
  |                           with ispf var pulldsns           |
  |            12/09/19 LBD - Support (ignore) omvs files and  |
  |                           subdirectories                   |
  |            11/16/19 LBD - Change to use ZIGISTAT routine   |
  |            10/30/19 LBD - Get DCB info from /.zigi/dsn     |
  |            10/28/19 LBD - Support sequential files         |
  |            06/12/19 LBD - Correct to handle a git direcory |
  |            06/11/19 LBD - Add popup status                 |
  |            06/10/19 LBD - Creation                         |
  | ---------------------------------------------------------- |
  |    zigi - the z/OS ISPF Git Interface                      |
  |    Copyright (C) 2020 - Henri Kuiper and Lionel Dyck       |
  |                                                            |
  |    This program is free software: you can redistribute it  |
  |    and/or modify it under the terms of the GNU General     |
  |    Public License as published by the Free Software        |
  |    Foundation, either version 3 of the License, or (at     |
  |    your option) any later version.                         |
  |                                                            |
  |    This program is distributed in the hope that it will be |
  |    useful, but WITHOUT ANY WARRANTY; without even the      |
  |    implied warranty of MERCHANTABILITY or FITNESS FOR A    |
  |    PARTICULAR PURPOSE.  See the GNU General Public License |
  |    for more details.                                       |
  |                                                            |
  |    You should have received a copy of the GNU General      |
  |    Public License along with this program.  If not, see    |
  |    <https://www.gnu.org/licenses/>.                        |
  * ---------------------------------------------------------- */

  /* -------------------------------------------- *
  | Get the ISPF Variables with our instructions |
  * -------------------------------------------- */
  Address ISPExec
  'vget (ckothlq ckotdir pulldsns mgen ckotqual)'
  if datatype(mgen) /= 'NUM' then mgen = 0

  Address TSO

  /* -------------------------------------------------------- *
  | Issue the ls command to get file names and sizes for all |
  | files in the current directory and sub-directories.      |
  * -------------------------------------------------------- */
  cmd = 'ls -laRk' ckotdir
  rc = bpxwunix(cmd,,stdout.,stderr.)

  /* ---------------------------------------------- *
  | Display any error messages and if so then exit |
  * ---------------------------------------------- */
  if stderr.0 > 0 then do
    do i = 1 to stderr.0
      say stderr.i
    end
    exit 8
  end

  /* ------------------------- *
  | Define our work variables |
  * ------------------------- */
  parse value '' with subs files null pullmems.
  hit = 0

  /* ------------------------------------ *
  | Read in ../.zigi/dsn to get dcb info |
  * ------------------------------------ */
  cmd = 'cd' ckotdir '&& ls -la .zigi'
  x = bpxwunix(cmd,,co.,ce.)
  if x > 0 then do
    def_recfm = 'FB'
    def_lrecl = 80
    def_blksize = 32720
    def. = null
  end
  else do
    call outtrap 'x.'
    ckdd = 'ck'time('s')
    if sysvar('syspref') = null then pref = sysvar('sysuid')
    else pref = sysvar('syspref')
    x = bpxwunix("cat '"ckotdir"/.zigi/dsn'",,ck.)
    def. = null
    zdsn. = null
    call outtrap 'off'
    do i = 1 to ck.0
      if left(ck.i,1) = '#' then iterate
      if word(ck.i,1) = '*' then do
        parse value ck.i with . def_dsorg def_recfm def_lrecl def_blksize .
      end
      else do
        dsn = word(ck.i,1)          /* dataset name less hlq */
        def.dsn = subword(ck.i,2)   /* dataset dsorg  */
        zdsn.dsn = word(ck.i,6)     /* file extension */
      end
    end
  end

  /* ------------------------------- *
  | Get the list of Binary Datasets |
  * ------------------------------- */
  Address ISPExec 'vget (gitenv) profile'
  call getenv
  call get_binfiles

  /* ---------------------------------------------------- *
  | Process the results of the ls command to:            |
  | 1. collect number of members per sub-directory       |
  | 2. collect bytes count (in k) for each sub-directory |
  | 3. collect info on sequential files                  |
  * ---------------------------------------------------- */
  if stdout.0 > 0 then
  do i = 1 to stdout.0
    select
      when pos(ckotdir,stdout.i) > 0 then do
        parse value stdout.i with (ckotdir)sub':'
        if left(sub,1) = '/' then sub = substr(sub,2)
        if strip(sub) /= '' then do
          size.sub = 0
          dir.sub = 0
          si = 0
          if left(sub,1) /= '.' then do
            if pulldsns = null then subs = subs sub
            else if wordpos(sub,pulldsns) > 0 then do
              subs = subs sub
              wp = wordpos(sub,pulldsns)
              Address ISPExec 'vget (zv'wp')'
              interpret 'mems = zv'wp
              si = si + 1
              if zdsn.sub /= null then do
                 ext = '.'zdsn.sub
                 if pos(ext,mems) > 0 then do is = 1 to words(mems)
                    parse value word(mems,is) with m'.'.
                    mems = m delword(mems,is,1)
                    end
                    mems = translate(mems)
                 end
              pullmems.sub = mems
              Address ISPExec 'verase zv'wp
            end
          end
        end
      end
      when word(stdout.i,1) = 'total' then do
        hit = hit + 1
      end
      when hit > 1 & left(stdout.i,1) = '-' then
      if strip(sub) /= '' then do
        size.sub = size.sub + word(stdout.i,5)
        dir.sub = dir.sub + 1
      end
      when hit = 1 & left(stdout.i,1) = '-' then do
        file = word(stdout.i,9)
        if left(file,1) = '.' then iterate
        fx = translate(file,'??????????????????????????', ,
          'abcdefghijklmnopqrstuvwxyz')
        if pos('?',fx) > 0 then iterate
        if pulldsns = null then do
          size.file =  word(stdout.i,5)
          files = files file
        end
        if wordpos(file,pulldsns) > 0 then do
          size.file =  word(stdout.i,5)
          files = files file
        end
      end
      otherwise nop
    end
  end

  /* -------------------------------------------- *
  | Process the individual files, if any         |
  | Allocation and Copy                          |
  * -------------------------------------------- */
  do i = 1 to words(files)
    parse value '' with zs1 zs2 zs3 zs4 zs5 zs6 zs7 zs8
    zs9 = 'Patience while the data is copied from OMVS files' ,
      'to z/OS.'
    sub = word(files,i)
    fileg = "'"ckothlq"."sub"'"
    odir = "'"ckotdir"/"sub"'"
    zs1 = 'Processing file:' sub
    zs2 = 'From:           ' odir
    zs3 = 'To:             ' fileg
    bin = is_binfile(sub)
    if bin = 1 then type = 'Binary'
    else type = 'Text'
    zs7 = 'Type            ' type
    call pop_status
    call outtrap 'x.'
    if sysdsn(fileg) = 'OK' then
    'delete' fileg
    tracks =  (size.sub%50000 + 1) * 2
    call get_dcb
    'alloc ds('fileg') new spa('tracks','tracks') tr dsorg(ps)' ,
      'recfm('recfm') lrecl('lrecl') blksize('blksize')'
    'free ds('fileg')'
    call outtrap 'x.'
    m = fileg
    'oget' odir m type
    call outtrap 'off'
  end

  /* -------------------------------------------- *
  | Process the sub-directories and initiate the |
  | Allocation and Copy                          |
  | Ignore subdirectories                        |
  * -------------------------------------------- */
  do i = 1 to words(subs)
    parse value '' with zs1 zs2 zs3 zs4 zs5 zs6 zs7 zs8
    zs9 = 'Patience while the data is copied from OMVS files' ,
      'to a z/OS PDS.'
    sub = word(subs,i)
    bin = is_binfile(sub)
    if bin = 1 then type = 'Binary'
    else type = 'Text'
    zs7 = 'Type:                   ' type
    fx = translate(sub,'??????????????????????????', ,
      'abcdefghijklmnopqrstuvwxyz')
    if pos('?',fx) > 0 then iterate
    if pullmems.sub /= null then dir.sub = words(pullmems.sub)
    zs1 = 'Processing subdirectory:' sub
    zs2 = 'Members:                ' fix_num(dir.sub)
    zs3 = 'Total bytes (k):        ' fix_num(size.sub)
    tracks =  (size.sub%50000 + 1) * 2
    zs4 = 'Tracks allocated:       ' fix_num(tracks)
    call pop_status
    call alloc_copy_pds
    call add_stats
  end

  Exit

  /* ----------------------------------------------------- */
  /* number format code thanks to Doug Nadel               */
  /* ----------------------------------------------------- */
fix_num: procedure
  arg bytes
  str=strip(translate('0,123,456,789,abc,def', ,
    right(bytes,16,','), ,
    '0123456789abcdef'),'L',',')
  bytes = strip(str)
  return bytes

  /* ----------------------------------------------------------------- *
  | Allocate the PDS and perform the copy using OGET for selective    |
  | copies or OGETX for a full PDS                                    |
  | - if the target PDS exists as a PDS, delete and realloc as a PDSE |
  | - if the target is a PDSE then it will NOT be reallocated         |
  | - The target PDS will be allocated as a PDSE version 2.           |
  | - if maxgen (mgen) is provided then member generations will       |
  |   also be defined at allocation                                   |
  | - Uppercase and remove defined extension for members              |
  * ----------------------------------------------------------------- */
Alloc_Copy_PDS:
  pds = "'"ckothlq"."sub"'"
  odir = "'"ckotdir"/"sub"/"
  zs8 = ''
  if pullmems.sub = null then
  if sysdsn(pds) = 'OK' then do
    zs8 = 'Re-Allocating'
    call outtrap 'x.'
    'delete' pds
    call outtrap 'off'
  end
  else zs8 = 'Using existing allocation'
  zs5 = 'Allocating PDSE:        ' pds
  call pop_status
  if pullmems.sub = null then do
    call get_dcb
    if mgen > 0 then gens = 'maxgens('mgen')'
    else gens = null
    'Alloc new spa('tracks','tracks') recfm('recfm') lrecl('lrecl')' ,
      'Blksize('blksize') Dsntype(Library,2) dsorg(po) dir(1)' ,
      'dsn('pds')' gens
    'Free ds('pds')'
    zs8 = 'Re-Allocated'
  end
  zs6 =  'Populating from:        ' odir
  call pop_status
  /* ---------------------------------------------------- *
  | Read directory to get all member file names and then |
  | adjust according and then do individual oget         |
  * ---------------------------------------------------- */
  target = strip(pds,'B',"'")
  call syscalls 'ON'
  address syscall
  rdir = strip(odir,'B',"'")
  rdir = strip(rdir,'T','/')
  'readdir' rdir 'mems.'
  address ispexec
  call outtrap 'x.'
  do ii = 1 to mems.0
    if mems.ii = "." | mems.ii = ".." then do
      /* skip the . and .. things */
      iterate
    end
    m = mems.ii    /* ignore the translation */
    if zdsn.sub /= null then
       if right(m,length(zdsn.sub)) = zdsn.sub then do
          parse value m with m'.'.
          m = translate(m)
       end
    if pullmems.sub /= null then
    if wordpos(m,pullmems.sub) = 0 then iterate
    src = rdir'/'mems.ii
    bin = is_binfile(sub'/'mems.ii)
    if bin = 1 then type = 'Binary'
    else type = 'Text'
    Address TSO
    'OGET' "'"src"'" "'"target"("m")'" type
    Address ISPexec
  end
  call syscalls 'OFF'
  call outtrap 'off'
  return

get_dcb:
  if def.sub /= null then do
    parse value def.sub with dsorg recfm lrecl blksize .
    recfm = left(recfm,1) substr(recfm,2,1) substr(recfm,3,1)
  end
  else do
    recfm = left(def_recfm,1) substr(def_recfm,2,1) substr(def_recfm,3,1)
    lrecl = def_lrecl
    blksize = def_blksize
  end
  return

  /* ------------ *
  | PopUp Status |
  * ------------ */
Pop_Status:
  Address ISPExec
  call pfshow 'off'
  'Control Display Lock'
  'Addpop row(3) column(3)'
  'Display Panel(zigipopc)'
  'Rempop'
  call pfshow 'reset'
  Address TSO
  return

  /* ---------------------------------- *
  | Add ISPF Statistics to all Members |
  | - set the initial userid to ZIGI   |
  * ---------------------------------- */
Add_Stats:
  zs8 = 'Adding/Updating ISPF Statistics'
  call pop_status
  filepath = ckotdir'/.zigi/'sub
  statmems = pullmems.sub
  Address ISPExec 'vput (statmems)'
  '%zigistat' pds filepath 'U'
  return

  /* ------------------------------------------------------ *
  | The pfshow routine will:                               |
  | 1. check to see the passed option                      |
  | 2. if Off then it will save the current pfshow setting |
  |    - save the current setting                          |
  |    - turn off pfshow                                   |
  | 3. if the option is Reset then it will                 |
  |    - test if pfshow was on and turn it back on         |
  * ------------------------------------------------------ */
pfshow:
  arg pfkopt
  if pfkopt = 'RESET' then do
    if pfkeys = 'ON' then
    'select pgm(ispopf) parm(FKA,ON)'
  end
  if pfkopt = 'OFF' then do
    'vget (zpfshow)'
    pfkeys = zpfshow
    if pfkeys /= 'OFF' then
    'select pgm(ispopf) parm(FKA,OFF)'
  end
  return

strreplace: Procedure Expose null
  string  = arg(1)
  strfrom = arg(2)
  strto   = arg(3)
  if pos(strfrom,string) = 0 then return string
  newString = null
  do i = 1 to length(string)
    if substr(string,i,1) /= strfrom
    then newstring = newstring''substr(string,i,1)
    else  newstring = newstring''strto
  end
  return newstring

get_binfiles:
  /* ---------------------------------------------------------\
  | Name:      binfiles                                        |
  |                                                            |
  | Function:  Fills the global binfiles. stem with all        |
  |            current repo files that are added as binary.    |
  \---------------------------------------------------------- */
  cmd = 'cd' ckotdir'/ &&'
  cmd = 'cat -W filecodeset=UTF-8,pgmcodeset=IBM-1047' ckotdir'/.gitattributes'
  cmd = cmd ' | grep git-encoding=BINARY'
  cmd = cmd '| cut -d" " -f1'
  x = docmd(cmd)
  if so.0 = 0 then do
    binfiles.0 = 0
    return 0
  end
  do b = 1 to so.0
    binfiles.b = so.b
  end
  binfiles.0 = so.0
  return 0

is_binfile:
  /* ---------------------------------------------------------\
  | Name:      is_binfile                                      |
  |                                                            |
  | Function:  Checks the global binfiles. stem for the        |
  |            provided dataset or dataset/member              |
  \---------------------------------------------------------- */
  arg file
  res = 0
  if datatype(binfiles.0) /= 'NUM' then return res
  do bi = 1 to binfiles.0
    if right(binfiles.bi,1) = '*' then do
      parse value file with test'/'.
      if left(binfiles.bi,length(binfiles.bi)-2) = test
      then return 1
    end
    if binfiles.bi = file then return 1
  end
  return res

  /* ----------------------------------------------------- *
  | Get the users current OMVS enviornment for use in the |
  | bpxwunix commands.                                    |
  * ----------------------------------------------------- */
GETENV:
  cmd  = docmdx('env')
  rc = bpxwunix(cmd,,env.,se.)
  envc = env.0
  call add_env '_BPX_SHAREAS=YES'
  call add_env '_BPX_SPAWN_SCRIPT=YES'
  call add_env 'EXPORT _EDC_ADD_ERRORNO2=1'
  env.0 = envc
  drop so. se.
  return

  /* -------------------- *
  | Add info to env stem |
  * -------------------- */
add_env:
  parse arg env_val
  envc = envc + 1
  env.envc = env_val
  return

docmd:
  parse arg cmd
  drop so. se.
  if gitenv /= null then do
    cmd = ". "gitenv" > /dev/null 2>&1 && "cmd
  end
  x = bpxwunix(cmd,,so.,se.,env.)
  return x

docmdx:
  /* quircky thing, we need to export HOME as we are
  not running a login shell via bpxwunix */
  parse arg cmd
  drop so. se.
  if rx = null then do
    rx = 'export HOME='home' && . /etc/profile > /dev/null 2>&1 && '
    c = "[[ -f "home"/.profile ]] && echo f"
    x = bpxwunix(c,,o.,e.)
    if o.0 = 1 & o.1 = "f" then do
      rx = rx '. 'home'/.profile > /dev/null 2>&1 && '
    end
  end
  r = rx ' ' cmd
  return r
