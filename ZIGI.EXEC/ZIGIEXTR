  /* --------------------  rexx procedure  -------------------- *
  | Name:      zigiextr                                        |
  |                                                            |
  | Function:  ZIGI Extract                                    |
  |                                                            |
  |  Extract the changed files from the Git repository         |
  |  based upon the tags provided.                             |
  |                                                            |
  |  Processing: 0. Validate we are running under ISPF         |
  |              1. Process parameters and validate            |
  |              2. Validate omvs-directory (Git repository)   |
  |                 exists and is a ZIGI repository            |
  |              3. Validate the extract-dir does not exist    |
  |                 and create it                              |
  |              4. Save current repository branch             |
  |              5. Checkout a temporary branch                |
  |              6. Checkout the <hash>                        |
  |              7. Copy directory into a working directory    |
  |              8. Git Show the provided tags to find delta   |
  |                 elements                                   |
  |                 - save files in the new extract directory  |
  |                   if one provided                          |
  |              9. Checkout original branch (master)          |
  |             10. Copy changed OMVS files into the extract   |
  |                 directory (if provided)                    |
  |             11. Generate ISPF variables for datasets and   |
  |                 members and call ZIGICKOT to create the    |
  |                 z/OS datasets with the changed elements    |
  |             12. Delete the temporary branch (5)            |
  |             13. Delete the working directory (7)           |
  |                                                            |
  | Syntax:    %zigiextr omvs-directory zos-hlq ,              |
  |                      extract-dir tags                      |
  |                                                            |
  | Parameters: (all required)                                 |
  |                                                            |
  |      omvs-directory  Directory of the Repository           |
  |      zos-hlq         z/OS HLQ for the extracted datasets   |
  |      extract-dir     OMVS directory to be created for      |
  |                      any extracted OMVS files or . if none |
  |      tags            Git commit tags to identify the       |
  |                      changed elements                      |
  |                                                            |
  | Dependencies:                                              |
  |             1. Must have access to ISPF services           |
  |             2. Calls ZIGICKOT which must be in the         |
  |                SYSPROC or SYSEXEC allocation               |
  |                                                            |
  | Author:    Lionel B. Dyck                                  |
  |                                                            |
  | History:  (most recent on top)                             |
  |            10/25/20 LBD - Improve usssafe routine          |
  |            07/29/20 LBD - Add _EDC_ZERO_RECLEN=Y to env.   |
  |            06/21/20 LBD - View the extract log if omvsdir  |
  |            06/20/20 LBD - Fix getting newest hash          |
  |                           (major update)                   |
  |            06/14/20 LBD - Correct copy of OMVS subdirs     |
  |            06/13/20 LBD - Lots of work - appears ready     |
  |            06/12/20 LBD - Creation                         |
  | ---------------------------------------------------------- |
  |    zigi - the z/OS ISPF Git Interface                      |
  |    Copyright (C) 2020 - Henri Kuiper and Lionel Dyck       |
  |                                                            |
  |    This program is free software: you can redistribute it  |
  |    and/or modify it under the terms of the GNU General     |
  |    Public License as published by the Free Software        |
  |    Foundation, either version 3 of the License, or (at     |
  |    your option) any later version.                         |
  |                                                            |
  |    This program is distributed in the hope that it will be |
  |    useful, but WITHOUT ANY WARRANTY; without even the      |
  |    implied warranty of MERCHANTABILITY or FITNESS FOR A    |
  |    PARTICULAR PURPOSE.  See the GNU General Public License |
  |    for more details.                                       |
  |                                                            |
  |    You should have received a copy of the GNU General      |
  |    Public License along with this program.  If not, see    |
  |    <https://www.gnu.org/licenses/>.                        |
  * ---------------------------------------------------------- */

  Parse Arg omvsdir zoshlq extdir tags


  if sysvar('sysispf') /= 'ACTIVE' then do
    say 'ZIGIEXTR requires ISPF services which are currently unavailable.'
    say 'Try again under ISPF.'
    exit 16
  end

  /* ------------------- *
  | Define our defaults |
  * ------------------- */
  parse value '' with null pulldsns members omvsfiles ofile tagl. ,
    hash_tags
  zerrhm     = 'zigih00'
  zerralrm   = 'NO'
  zerrtp     = 'NOTIFY'
  Address ISPExec

  /* ----------------------------------- *
  | Get the environment variables setup |
  * ----------------------------------- */
  call setenv
  tempBranch = 'zigiExtract-'date('j')'-'time('s')
  tempDir    = home'/zigiExtract-'date('j')'-'time('s')

  /* -------------------------- *
  | Check the OMVS directories |
  * -------------------------- */
  if extdir /= '.' then
  call check_omvs

  /* ------------- *
  | Check for Git |
  * ------------- */
  call check_git

  /* ------------------------------------------- *
  | Get Current Repoistory Info and commit info |
  * ------------------------------------------- */
  call get_newest_hash_tag
  call get_repo_info
  if extdir /= '.' then
  call create_new_omvsdir
  call do_Extract

  Address ISPExec
  'Control Display Save'
  if extdir /= '.' then do
   ofile = extDir'/Extract.info'
   'View file(ofile) panel(zigiedit)'
    "Select Pgm(ISRDSLST) PARM(UDL" extdir") SUSPEND"
  end

  "LMDINIT LISTID(LISTID) LEVEL("zoshlq")"
  "LMDDISP LISTID("ListId") Confirm(Yes)",
    "View(Volume)"
  "LMDFREE LISTID("ListId")"
  'Control Display Restore'

  Exit

  /* -------------------------------- *
  | Create new Target OMVS Directory |
  * -------------------------------- */
Create_New_OmvsDir:
  zs1 = 'Creating the Target OMVS Directory:'
  zs2 = extdir
  call do_popup
  cmd = 'mkdir' extdir
  cmd = cmd '&& chmod 744' extdir
  x = docmd(cmd)
  if x > 0 then call view_std 'B'
  /* -------------------------------------------- *
  | Now save the delta info in the new directory |
  * -------------------------------------------- */
  zs1 = 'Saving Extract File info.'
  zs2 = null
  call do_popup
  cmd = 'cd' omvsdir
  do ai = 1 to words(all_hash)
    hloc = word(all_hash,ai)
    cmd = cmd '&& git log  --diff-filter="ACDMRT" -1 -U' Hloc
    cmd = cmd '>>' extDir'/Extract.info'
  end
  x = docmd(cmd)
  if x > 0 then call view_std 'B'
  return

  /* ------------------------------------------------------------- *
  | Do the actual extract:                                        |
  |                                                               |
  | 1. Create and change to (checkout) a working branch           |
  | 2. Get the delta for the requested hash (converted from tag)  |
  | 3. Checkout the hash into the working branch                  |
  | 4. Copy into new target omvs directory if one was requested   |
  | 5. Checkout the original branch                               |
  | 6. Copy any OMVS delta files into the omvs directory (4)      |
  | 7. Call zigickot to create the z/OS datasets of the delta (2) |
  * ------------------------------------------------------------- */
Do_Extract:
  /* ------------------------------------------ *
  | Define temporary branch and directory name |
  * ------------------------------------------ */
  /* ------------------------------------------------------------ *
  | Checkout (create) the working Branch                         |
  | Then Copy the current directory, and subdirectories, into it |
  | Then Checkout (return) to the original branch                |
  * ------------------------------------------------------------ */
  zs1 = 'Creating a temporary branch'
  zs2 = 'Please standby'
  call do_popup
  cmd = 'cd' omvsdir
  cmd = cmd '&& git checkout -b' tempBranch newest_hash
  cmd = cmd '&& mkdir' tempDir '&& git status'
  x = docmd(cmd)
  if x > 0 then call view_std 'B'
  call do_omvscopy
  zs1 = 'Returning to the original Branch'
  zs2 = 'Please standby'
  call do_popup
  cmd = 'cd' omvsdir
  cmd = cmd '&& git checkout' activeBranch
  x = docmd(cmd)
  if x > 0 then call view_std 'B'
  ckotdir = tempDir
  ckothlq = translate(zoshlq)
  if strip(pulldsns) = null then do
    zs1 = 'Nothing to do'
    zs2 = 'There are no z/OS datasets or OMVS files that changed' ,
      'with the selected Commit Hash or Tag.'
    call do_popupP
    return
  end
  zs1 = 'Creating the z/OS Datasets'
  zs2 = ckotdir ckothlq
  call do_popup
  'vput (ckotdir ckothlq pulldsns)'
  'Select cmd(%zigickot)'

/* ------------------------------- *
 | Now copy the omvsfiles (if any) |
 * ------------------------------- */
  if extdir /= '.' then
  if words(omvsfiles) >> 0 then
  do omvi = 1 to words(omvsfiles)
    file= word(omvsfiles,omvi)
    zs1 = 'Copying OMVS file:'
    zs2 = 'to' extDir
    call do_popup
    if  pos('/',file) > 0 then do
      cpdir = '-R'
      ndir = translate(file,' ','/')
      ndir = subword(ndir,1,words(ndir)-1)
      ndir = translate(ndir,'/',' ')
    end
    else do
      ndir = null
      cpdir = null
    end
    cmd = 'cd' tempDir
    if ndir /= null then
    cmd = cmd '&& mkdir' extDir''ndir
    cmd = cmd '&& cp -v' cpdir file extDir''file
    x = docmd(cmd)
    if x > 0 then call view_std 'B'
  end
  cmd = 'rm -r' tempDir
  cmd = cmd '&& cd' omvsdir
  cmd = cmd '&& git branch  -D' tempBranch
  x = docmd(cmd)
  if x > 0 then call view_std 'B'
  return

  /* ------------------------------------------ *
  | Only copy real files ignoring the . files. |
  * ------------------------------------------ */
Do_OmvsCopy:
  zs1 = 'Copying temporary branch OMVS directory.'
  zs2 = 'Please standby'
  call do_popup
  x = syscalls('ON')
  address syscall 'readdir' omvsdir d. s.
  x = syscalls('OFF')
  do ocopyi = 1 to d.0
    file = strip(d.ocopyi)
    if file /= '.zigi' then
    if left(file,1) = '.' then iterate
    zs1 = 'Copying file:' file
    zs2 = 'Please standby'
    call do_popup
    if s.ocopyi.st_type = '1'
    then do
      cdir = '-R'
      file = file'/'
      newdir = tempDir'/'file
      odir = file
    end
    else do
      cdir = null
      newdir = null
      odir = null
    end
    cmd = 'cd' omvsdir
    if newdir /= null then
    cmd = cmd '&& mkdir' newdir
    cmd = cmd '&& cp' cdir omvsdir'/'file tempDir'/'odir
    cmd = usssafe(cmd)
    x = docmd(cmd)
    if x > 0 then call view_std 'B'
  end
  return

  /* -------------------------------------------------------------- *
  | If more than one hash/tag was provided we need to get the most |
  | recent hash. If a tag then we need the hash.                   |
  * -------------------------------------------------------------- */
Get_Newest_Hash_Tag:
  zs1 = 'Getting the commit/tag specifics.'
  zs2 = 'Please standby'
  call do_popup
  cmd = 'cd' omvsdir
  cmd = cmd "&& git log --abbrev-commit --pretty=format:'%h %cd'"
  x = docmd(cmd)
  if x > 0 then call view_std 'B'
  latest = 0
  newest_hash = null
  oldest_hash = null
  all_hash = null
  test_tags = tags
  hit = 0
  hash_counter = 0
  do glht = 1 to so.0
    hash = word(so.glht,1)
    hash_counter = hash_counter + 1
    if wordpos(hash,test_tags) > 0 then do
      hit = 1
      all_hash = all_hash hash
      HashLoc.hash = glht
      hp = wordpos(hash,test_tags)
      test_tags = strip(delword(test_tags,hp,1))
      if newest_hash = null then
      newest_hash = hash
      oldest_hash = hash
    end
    else if hit = 1 then all_hash = all_hash hash
    if test_tags = null then return
  end
  return

  /* ------------------------------------------------------------ *
  | Get the repository information, including the delta elements |
  | for the requested hash/tags                                  |
  * ------------------------------------------------------------ */
Get_Repo_Info:
  zs1 = 'Getting the repository information'
  zs2 = 'Please standby'
  call do_popup
  cmd = 'cd' omvsdir
  cmd = cmd '&& git status'
  x = docmd(cmd)
  if x > 0 then call view_std 'B'
  parse value so.1 with 'On branch' activeBranch
  zs1 = 'Collecting information on what was changed.'
  zs2 = 'Please standby'
  call do_popup
  cmd = 'cd' omvsdir
  do ai = 1 to words(all_hash)
    hloc = word(all_hash,ai)
    cmd = cmd '&& git log  --diff-filter="ACDMRT" -1 -U' Hloc
    cmd = cmd " | grep -e '+++' -e 'Binary'"
  end
  x = docmd(cmd)
  if x > 0 then call view_std 'B'
  call stem_sort
  old = null
  do i = 1 to so.0
    if left(so.i,1) = '+' then do
      if old = so.i then iterate
      old = so.i
      parse value so.i with '+++ b/'file
      if left(file,1) = '/' then iterate
      if left(file,1) = '.' then iterate
      if pos('/',file) > 0
      then parse value file with file'/'mbr
      else mbr = null
      if ofile = null then ofile = file
    end
    else do
      parse value so.i with . . . . 'b/'file 'differ'
      if left(file,1) = '/' then iterate
      if left(file,1) = '.' then iterate
      if pos('/',file) > 0
      then parse value file with file'/'mbr
      else mbr = null
      if ofile = null then ofile = file
    end
    call update_pulldsns
  end
  last = 1
  call update_pulldsns

  do i = 1 to words(pulldsns)
    dsn = word(pulldsns,i)
    'vget zv'i
  end
  return

  /* ----------------------------------------------------- *
  | Update the pulldsns and create the ispf variables for |
  | pds members to pass to zigickot                       |
  * ----------------------------------------------------- */
Update_Pulldsns:
  if dsnvalid(file) = 'NO' then do
    if mbr /= null then file = file'/'mbr
    if wordpos(file,omvsfiles) = 0 then
    omvsfiles = omvsfiles file
    if ofile /= file then do
      wp = wordpos(ofile,pulldsns)
      interpret 'zv'wp '= (members)'
      zv.wp = members
      'vput zv'wp
      members = null
      ofile = file
    end
    pulldsns = pulldsns file
  end
  else do
    if wordpos(file,pulldsns) = 0 | last = 1 then do
      if last = 1 then file = 0
      if ofile /= file then do
        wp = wordpos(ofile,pulldsns)
        interpret 'zv'wp '= (members)'
        zv.wp = members
        'vput zv'wp
        members = null
        ofile = file
      end
      pulldsns = pulldsns file
    end
    if last /= 1 then
    if mbr /= null then members = members mbr
  end
  return

  /* -------------------------------------------------- *
  | Determine if the provided filename is a valid z/OS |
  | dataset name.                                      |
  * -------------------------------------------------- */
dsnvalid:
  /* Tests for a 'potentially valid' z/OS datasetname */
  parse arg val_dsn
  if left(val_dsn,1) = '.' then return 'NO'
  if strip(val_dsn) = null then return 'NO'
  val_dsn = strip(val_dsn,'B',"'")
  upp = TRANSLATE(val_dsn,".ABCDEFGHIJKLMNOPQRSTUVWXYZ",,
    ".abcdefghijklmnopqrstuvwxyz")
  tdsn = translate(val_dsn,' ','.')
  retval = 'OK'   /* asssume good */
  do dsnvi = 1 to words(tdsn)
    w = word(tdsn,dsnvi)
    if length(w) > 8 then retval = 'NO'
    if pos(left(w,1),'ABCDEFGHIJKLMNOPQRSTUVWXYZ$#@') = 0 then retval = 'NO'
    w = translate(w,left(' ',39,' '), ,
      'ABCDEFGHIJKLMNOPQRSTUVWXYZ-$#@0123456789')
    w = strip(w)
    if w /= null then retval = 'NO'
  end
  if retval /= 'NO' then
  if upp = val_dsn then do
    smsg = msg()
    call msg 'OFF'
    if sysdsn(val_dsn) = "OK" | sysdsn(val_dsn) = "DATASET NOT FOUND"
    then retval = 'OK'
    else retval = "NO"
    call msg smsg
  end
  return retval

  /* --------------------------------------------------- *
  | Validate the OMVS directory is a ZIGI Git directory |
  * --------------------------------------------------- */
Check_Git:
  cmd = 'cd' omvsdir '&& ls -la .zigi'
  x = docmd(cmd)
  if pos('not found',se.1) > 1 then do
    zerrsm = 'Error'
    zerrlm = 'The requested OMVS Directory is NOT a ZIGI managed Git',
      'repository:'
    'Setmsg msg(isrz003)'
    exit 8
  end
  return

  /* ---------------------------------- *
  | Validate the OMVS directory exists |
  * ---------------------------------- */
Check_OMVS:
  cmd = 'ls -la' omvsdir
  x = docmd(cmd)
  if pos('not found',se.1) > 1 then do
    zerrsm = 'Error'
    zerrlm = 'The requested OMVS Directory where the Git Repository' ,
      'resides does not exist:' omvsdir
    'Setmsg msg(isrz003)'
    exit 8
  end
  cmd = 'ls -la' extdir
  x = docmd(cmd)
  if pos('not found',se.1) = 0 then do
    zerrsm = 'Error'
    zerrlm = 'The requested OMVS Directory to receive the extracted' ,
      'OMVS files exists and it should not:' ,
      left(extdir,74) 'Try again with a non-existent directory.'
    'Setmsg msg(isrz003)'
    exit 8
  end
  return

  /* -------------------------------- *
  | Issue the requested OMVS command |
  * -------------------------------- */
docmd:
  parse arg cmd
  drop so. se.
  x = bpxwunix(cmd,,so.,se.,env.)
  return x

  /* ----------------------------------------------------- *
  | Get the users current OMVS enviornment for use in the |
  | bpxwunix commands.                                    |
  * ----------------------------------------------------- */
SetEnv:
  cmd = 'pwd'
  env.1 = '_BPX_SHAREAS=YES'
  env.0 = 1
  x = bpxwunix(cmd,,so.,se.,env.)
  home    = strip(so.1)
  sol = so.0
  cmd  = docmdx('env')
  rc = bpxwunix(cmd,,env.,se.)
  envc = env.0
  call add_env '_BPX_SHAREAS=YES'
  call add_env '_BPX_SPAWN_SCRIPT=YES'
  call add_env 'EXPORT _EDC_ADD_ERRNO2=1'
  call add_env '_EDC_ZERO_RECLEN=Y'
  env.0 = envc
  drop so. se.
  return

  /* -------------------- *
  | Add info to env stem |
  * -------------------- */
add_env:
  parse arg env_val
  envc = envc + 1
  env.envc = env_val
  return

  /* ---------------------------------------- *
  | Used by getenv for special circumstances |
  * ---------------------------------------- */
docmdx:
  /* quircky thing, we need to export HOME as we are
  not running a login shell via bpxwunix */
  parse arg cmd
  drop o. se.
  rx = 'export HOME='home' && . /etc/profile > /dev/null 2>&1 && '
  c = "[[ -f "home"/.profile ]] && echo f"
  x = bpxwunix(c,,o.,se.)
  if o.0 = 1 & o.1 = "f" then do
    rx = rx '. 'home'/.profile > /dev/null 2>&1 && '
  end
  r = rx ' ' cmd
  return r

  /* ---------------------------------------------------------- *
  | Generalized routine to view stdout. (so.) or stderr. (se.) |
  | based on the parm passed                                   |
  * ---------------------------------------------------------- */
view_std:
  arg stdopt viewopt
  if stdopt = null then viewopt = 'B'
  if viewopt = null then viewopt = 'B'
  if stdopt = 'X' then stdopt = null
  if datatype(so.0) /= 'NUM' then so.0 = 0
  if datatype(se.0) /= 'NUM' then se.0 = 0
  if viewopt = 'B' then if so.0 + se.0 = 0 then return
  /* ------------------------------- *
  | Randomly define a DDName to use |
  * ------------------------------- */
  dd = 'zd'random(9999)
  /* --------------------------------------- *
  | Get lrecl to determine dcb for temp d/s |
  * --------------------------------------- */
  if stdopt /= 'C' then do
    vlrecl = 0
    do li  = 1 to so.0
      so.li = strip(so.li,'T')
      if length(so.li) > vlrecl then vlrecl = length(so.li)
      if so.li = null then so.li = ' '
    end
    do li  = 1 to se.0
      se.li = strip(se.li,'T')
      if length(se.li) > vlrecl then vlrecl = length(se.li)
      if se.li = null then se.li = ' '
    end
    sec = so.0 + se.0
  end
  else do
    do li = 1 to combine.0
      if length(combine.li) > vlrecl then vlrecl = length(combine.li)
    end
    sec = combine.0
  end
  if vlrecl < 81 then vlrecl = 80
  /* ------------------------------------------ *
  | Allocate a temporary data set for our data |
  * ------------------------------------------ */
  Address TSO
  /* calculate space needed with avg 50 bytes per record */
  prim = (((so.0 + se.0) * 50) % 56000) + 1
  if prim < 2 then prim = 5
  if viewopt = 'V' then do
    if sysvar('syspref') = null then pref = userid()'.'
    else pref = null
    vdsn = pref'work.zigi.gitdata'
  end
  else vdsn = null
  x = listdsi(vdsn)
  if x = 0 then do
    call outtrap 'x.'
    'delete' vdsn
    call outtrap 'off'
  end
  if vdsn /= null then vdsnp = 'da('vdsn') unit(3390)'
  else vdsnp = null
  if vlrecl > 255 then vlrecl = 251
  'Alloc f('dd') new spa('prim','prim') tr' ,
    'recfm(v b) lrecl('vlrecl+4') blksize(0)' vdsnp
  /* ----------------------------- *
  | If stdopt is 'B' then do both |
  * ----------------------------- */
  if stdopt /= 'C' then do
    stdopt = null
    sc = so.0
    do xi = 1 to se.0
      sc = sc + 1
      so.sc = se.xi
    end
    so.0 = sc
  end
  /* ----------------------- *
  | Write out the stem data |
  * ----------------------- */
  if stdopt = 'C' then do
    'Execio * diskw' dd '(finis stem combine.'
    drop combine.
    combine.0 = 0
  end
  if stdopt /= 'C' then do
    if stdopt = null
    then do
      'Execio * diskw' dd '(finis stem so.'
    end
    else do
      'Execio * diskw' dd '(finis stem se.'
    end
  end
  /* -------------------------------------------------- *
  | Access the Temporary Data Set using ISPF           |
  | Library Services.                                  |
  | Then using ISPF Browse service to browse the data. |
  | And use Library Services to Free the Data Set.     |
  * -------------------------------------------------- */
  Address ISPExec
  if sec > 0 then if viewopt = 'B' then do
    'lminit dataid(ddb) ddname('dd')'
    'browse dataid('ddb') panel(zigibrow)'
    'lmfree dataid('ddb')'
  end
  else do
    vmac = 'Panel(zigiedit) macro(zigivmac)'
    'view dataset('vdsn')' vmac
    vtitle = null
    'verase vtitle'
  end
  /* ----------------------------- *
  | Last Free the z/OS Allocation |
  * ----------------------------- */
  call outtrap 'x.'
  Address TSO ,
    'Free f('dd')'
  if vdsn /= null then
  Address TSO 'Delete' vdsn
  call outtrap 'off'
  return

  /* ---------------------------------------- *
  | Common routine for locked (2 line) popup |
  * ---------------------------------------- */
Do_Popup:
  call pfshow 'off'           /* make sure pfshow is off */
  'Control Display Lock'
  'Addpop row(4) column(8)'
  'Display Panel(zigipop)'
  'Rempop'
  call pfshow 'reset'         /* restore pfshow setting */
  return

  /* ---------------------------------------- *
  | Common routine for normal (2 line) popup |
  * ---------------------------------------- */
Do_PopupP:
  call pfshow 'off'           /* make sure pfshow is off */
  'Addpop row(4) column(8)'
  'Display Panel(zigipop)'
  'Rempop'
  call pfshow 'reset'         /* restore pfshow setting */
  return

  /* ------------------------------------------------------ *
  | The pfshow routine will:                               |
  | 1. check to see the passed option                      |
  | 2. if Off then it will save the current pfshow setting |
  |    - save the current setting                          |
  |    - turn off pfshow                                   |
  | 3. if the option is Reset then it will                 |
  |    - test if pfshow was on and turn it back on         |
  * ------------------------------------------------------ */
pfshow:
  if zpfshow = 'OFF' then return
  arg pfkopt
  if pfkopt = 'RESET' then do
    if pfkeys = 'ON' then
    'select pgm(ispopf) parm(FKA,ON)'
  end
  if pfkopt = 'OFF' then do
    'vget (zpfshow)'
    pfkeys = zpfshow
    if pfkeys /= 'OFF' then
    'select pgm(ispopf) parm(FKA,OFF)'
  end
  return

usssafe:
 parse arg safedsn
 if pos('$',safedsn) = 0 then return safedsn
 safe$pos = 1
 do forever
    pos$safe = pos('$',safedsn,safe$pos)
    if pos$safe < 1 then return safedsn
    left$safe = left(safedsn,pos$safe-1)
    right$save = substr(safedsn,pos$safe)
    safedsn = left$safe'\'right$save
    safe$pos = pos$safe + 2
    end
 return safedsn

oldsafe:
  parse arg safedsn
  if pos('$',safedsn) = 0 then return safedsn
  /* Let's not usssafe it twice :) */
  if pos('\$',safedsn) > 0 then return safedsn
  safedsn = strreplace(safedsn, '$', '\$')
  return safedsn

  /* ------------------------------------------------- *
  | String replace routine                           |
  | input string                                     |
  | from string                                      |
  | to string                                        |
  | translate is input to from                       |
  * ------------------------------------------------- */
strreplace:
  string  = arg(1)
  strfrom = arg(2)
  strto   = arg(3)
  if pos(strfrom,string) = 0 then return string
  newString = ''
  do repi = 1 to length(string)
    if substr(string,repi,1) /= strfrom
    then newstring = newstring''substr(string,repi,1)
    else  newstring = newstring''strto
  end
  return newstring

Stem_Sort:
  /* rexx command to sort a stem variable
  Simple bubble sort of "stem' by so.1
  Ken Singer, Shell Oil, Houston
  ********************************************************/
  if so.0 = 1 then return /* simple sort !*/
  ctr =  so.0
  do y = 1 to  ctr - 1
    do x = y+1 to ctr
      if so.x = null then leave
      if so.x < so.y then do
        /* swap these 2 entries */
        t1 = so.y ;
        so.y = so.x
        so.x = t1
      end
    end x
  end y
  Return
