  /* --------------------  rexx procedure  -------------------- *
  | Name:      zigistat                                        |
  |                                                            |
  | Function:  Collect or Compare the ISPF Stats for all       |
  |            members in a PDS                                |
  |                                                            |
  | Syntax:    x=zigistat(dsname filepath option)              |
  |                                                            |
  |            dsname is the z/OS dataset name to work with    |
  |                                                            |
  |            filepath is the OMVS file where the stats are   |
  |            stored and consists of:                         |
  |                localdir/repodir/.ZIGI/filename             |
  |                filename is the OMVS file that represents   |
  |                the z/OS PDS dataset name                   |
  |                                                            |
  | Options:   C - compare stats                               |
  |            S - save stats                                  |
  |            U - update stats to those saved                 |
  |                used when creating/refreshing datasets      |
  |                                                            |
  | Vars:      statmems ispf variable for selective update     |
  |                                                            |
  | Usage                                                      |
  |   Notes: Subroutine of ZIGI                                |
  |          Returns string of members changed                 |
  |                                                            |
  | Dependencies:                                              |
  |          ISPF services                                     |
  |                                                            |
  | Return:                                                    |
  |          0 - stats saved or stats applied                  |
  |          8 - no dsname provided                            |
  |         12 - no filepath provided                          |
  |         16 - no option provided                            |
  |         20 - stats file in /.zigi missing                  |
  |     string - string of members with different stats        |
  |                                                            |
  | Author:    Lionel B. Dyck                                  |
  |                                                            |
  | History:  (most recent on top)                             |
  |            07/26/21 LBD - Fix allmems missing one member   |
  |            06/03/21 LBD - Change SHAREAS to REQUIRED       |
  |            05/29/21 LBD - Clean up environment setup       |
  |            05/26/21 LBD - Use dovetail getpds for stats    |
  |            05/18/21 LBD - More popups with info and fix    |
  |                           allmems variables setup          |
  |            05/06/21 LBD - Multiple allmems variables       |
  |            10/25/20 LBD - Improve usssafe routine          |
  |            09/27/20 LBD - Compare stats improved           |
  |            08/14/20 LBD - Don't update if readonly repo    |
  |            06/19/20 LBD - Ignore LMOD aliases as the main  |
  |                           lmod will have them included     |
  |            06/16/20 LBD - Use DEFRUID if it exists         |
  |            06/09/20 LBD - Bypass stat update for lmod      |
  |            05/08/20 LBD - Support Load Libraries           |
  |            01/08/20 LBD - Selecitve stat update if statmems|
  |            01/05/20 LBD - Correct special chars in filepath|
  |                           using usssafe routine            |
  |            11/22/19 LBD - If a member has no stats - add   |
  |            11/18/19 LBD - Many fixes and add Debug         |
  |            11/15/19 LBD - Creation                         |
  |                                                            |
  | ---------------------------------------------------------- |
  |    ZIGI - the z/OS ISPF Git Interface                      |
  |    Copyright (C) 2020 - Henri Kuiper and Lionel Dyck       |
  |                                                            |
  |    This program is free software: you can redistribute it  |
  |    and/or modify it under the terms of the GNU General     |
  |    Public License as published by the Free Software        |
  |    Foundation, either version 3 of the License, or (at     |
  |    your option) any later version.                         |
  |                                                            |
  |    This program is distributed in the hope that it will be |
  |    useful, but WITHOUT ANY WARRANTY; without even the      |
  |    implied warranty of MERCHANTABILITY or FITNESS FOR A    |
  |    PARTICULAR PURPOSE.  See the GNU General Public License |
  |    for more details.                                       |
  |                                                            |
  |    You should have received a copy of the GNU General      |
  |    Public License along with this program.  If not, see    |
  |    <https://www.gnu.org/licenses/>.                        |
  * ---------------------------------------------------------- */
zigistat:

  /* --------------- *
  | Define defaults |
  * --------------- */
  parse value '' with null string m. rx allmems
  zdd = 'ZS'time('s')

  /* --------------------------------- *
  | Check for parms and return if not |
  * --------------------------------- */
  parse arg dsn filepath opt
  if dsn      = null then return 8
  if filepath = null then return 12
  if opt      = null then return 16
  opt         = translate(opt)   /* make upper case */

  /* ---------------------------------------- *
  | Check for ZIGIDEBG DD for debug purposes |
  * ---------------------------------------- */
  x = listdsi('ZIGIDEBG' 'FILE')
  if x > 0 then if sysreason = 3
  then zigidebg = 1
  else zigidebg = 0

  call getenv

  Address ISPExec
  'vget (debugfil defruid readonly)'

  x = debug('start of zigistat with option:' opt)

  /* --------------------------------------- *
  | If option C or U then read in the stats |
  | - check if stats member exists rc=16    |
  | - read into stem stats.                 |
  * --------------------------------------- */
  if pos(opt,'C U') > 0 then do
    x = debug('Checking stats file' filepath)
    x = check_stats_file(filepath)
    rc = x
    x = debug('Checking stats file complete')
    if rc > 0 then return x
    x = debug('Reading the ISPF stats file')
    drop stats.
    cmd = 'cat' usssafe(filepath)
    x = bpxwunix(cmd,,stats.,se.)
    do i = 1 to stats.0
      stats.i = translate(stats.i,' ','0D'x)
    end
    x = debug('Reading complete')
  end

  /* ------------------ *
  * Define ISPF Dataid *
  * ------------------ */
  Address ISPExec

  /* ---------------------------------- *
  | Get dataset recfm (check for lmod) |
  * ---------------------------------- */
  x = listdsi(dsn)

  /* ------------ *
  * Set defaults *
  * ------------ */
  x = debug('Collecting stats for all members for:' dsn)
  parse value null with member mem. ,
    ZLCDATE ZLMDATE ZLVERS ZLMOD ZLMTIME ZLCNORC,
    ZLINORC ZLMNORC ZLUSER ,
    zlcnorce zlinorce zlmnorce ,
    zlsize zlamod zlrmode zlattr zlalias zlssi
  mem.0  = 0
  if defruid = null
  then newuid = sysvar('sysuid')
  else newuid = defruid

  zs1 = 'Collecting statistics for:'
  zs2 = dsn
  zs3 = null
  zs4 = null
  call do_popup4

  /* ----------------------- *
  * Now process all members *
  * ----------------------- */
  if words(dovedir) = 1 then do
    "LMINIT DATAID(STATUS) DATASET("dsn")"
    "LMOPEN DATAID("STATUS") OPTION(INPUT)"
    do forever
      "LMMLIST Dataid("status") OPTION(LIST) MEMBER(MEMBER)" ,
        "STATS(YES)"
      /* --------------------------------- *
      * If RC 4 or more leave the do loop *
      * --------------------------------- */
      if rc > 3 then leave
      /* -------------------------------- *
      | Check if no stats then add them. |
      * -------------------------------- */
      if sysrecfm /= 'U' then
      if zlcdate = null then
      if readonly = 0 then do
        'LMMSTATS DATAID('status') Member('member') user('newuid')'
        "LMMFind DATAID("status") Member("member") STATS(YES)"
      end
      /* ------------------------------ *
      * Add each member info to a stem *
      * ------------------------------ */
      c = mem.0 + 1
      if sysrecfm /= 'U'
      then mem.c = strip(member ,
        ZLCDATE  ZLMDATE  ZLVERS ZLMOD ZLMTIME ZLCNORC ,
        ZLINORC ZLMNORC ZLUSER ,
        zlcnorce zlinorce zlmnorce)
      else if strip(zlalias) = null then do
        mem.c = strip(member ,
          zlsize zlamod zlrmode zlattr zlalias zlssi)
      end
      else c = c - 1
      mem.0 = c
      if strip(zlalias) = null then
      if opt = 'C' then allmems = allmems member
      if c//100 = 0 then do
        zs3 = 'Processing count:' c
        call do_popup4
      end
    end

    /* ------------------------- *
    * Close and Free the Dataid *
    * ------------------------- */
    "LMClose Dataid("status")"
    "LMFree  Dataid("status")"
  end
  else do
    dovedir = subword(dovedir,2)
    cmd = usssafe(dovedir"getpds -M st=- //"strip(dsn,'B',"'"))
    drop mem. se.
    x = bpxwunix(cmd,,mem.,se.,env.)
    do mi = 1 to mem.0
      allmems = allmems word(mem.mi,1)
    end
  end
  x = debug('Stat collection complete.')

  zs1 = 'Collection complete.'
  call do_popup4

  /* ----------------------------------------------- *
  | Process the data based on the provided options: |
  |                                                 |
  |    C - compare stats                            |
  |    S - save stats                               |
  |    U - update stats to those saved              |
  |        used when creating/refreshing datasets   |
  * ----------------------------------------------- */
  Select
    /* ----------------------------------------------------- *
    | Save all stats for all members in the active dataset. |
    | - data will be saved to /.zigi/filename               |
    * ----------------------------------------------------- */
    When opt = 'S' then do
      x = debug('Saving stats begins to:' filepath)
      x = bpxwunix('rm' usssafe(filepath),,so.,se.)
      call write_stats
      x = debug('Saving stats completed.')
      return 0
    end
    /* ---------------------------------------------------------- *
    | Update ISPF Stats:                                         |
    |  - all members in the ZIGI stats member will have their    |
    |    ispf stats updated to reflect the saved stats           |
    |  - Use statmems ispf var for selective stat updates        |
    |  - new members will not be updated as we don't know about  |
    |   them                                                     |
    |  - members with no stats will have stats added if they are |
    |    in the saved stats member                               |
    * ---------------------------------------------------------- */
    When opt = 'U' then do
      if readonly = 1 then return 0
      if sysrecfm /= 'U' then do
        x = debug('Performing ISPF Stats file update for:' dsn)
        'vget (statmems)'
        if statmems /= null then do
          x = debug('Update Members:' statmems)
        end
        "LMINIT DATAID(zstats) DATASET("dsn")"
        "LMOPEN DATAID("zstats") OPTION(INPUT)"
        do i = 1 to stats.0
          parse value stats.i with member ZLCDATE ZLMDATE ZLVERS ZLMOD ,
            ZLMTIME ZLCNORC ZLINORC ZLMNORC ZLUSER ZLCNORCE ,
            ZLINORCE ZLMNORCE .
          if statmems /= null then
          if wordpos(member,statmems) = 0 then iterate
          if zlcdate = null then ,
            'LMMSTATS DATAID('zstats') Member('member') user('sysvar(sysuid)')'
          else ,
            'LMMSTATS DATAID('zstats') MEMBER('member') VERSION('zlvers')' ,
            'MODLEVEL('zlmod') CREATED('zlcdate') MODDATE('zlmdate')' ,
            'MODTIME('zlmtime') INITSIZE('zlinorc')' ,
            'MODRECS('zlmnorc') USER('zluser')'
        end
        "LMClose Dataid("zstats")"
        "LMFree  Dataid("zstats")"
        x = debug('ISPF Stats file update complete.')
        return 0
      end
    end
    /* ----------------------------------------------------------- *
    | Compare ISPF stats.                                         |
    |                                                             |
    | Comparison will be from the active datasets ISPF stats with |
    | the saved stats found in ISPF stats file in /.zigi          |
    |                                                             |
    | If a member is in the active but not in the saved list then |
    | it will be added to the returned string.                    |
    |                                                             |
    | If a members saved stats do not match the active stats then |
    | it will be added to the returned string.                    |
    * ----------------------------------------------------------- */
    When opt = 'C' then do
      x = debug('ISPF Stats comparison starting.')
      zs1 = 'Begin comparing stats'
      call do_popup4
      /* 1st setup the saved stem for easy comparison */
      do i = 1 to stats.0
        parse value stats.i with savedmem cd md . . mt . . . uid .
        m.savedmem = strip(cd md left(mt,5) uid)
      end
      /* now compare active to saved */
      do i = 1 to mem.0
        if i//100 = 0 then do
          zs3 = 'Checked' i 'members of' mem.0
          call do_popup4
        end
        parse value mem.i with actmem cd md . . mt . . . uid .
        data = strip(cd md left(mt,5) uid)
        if m.actmem = null
        then string = string actmem
        else if data /= m.actmem then string = string actmem
      end
      zs3 = 'Completed - building member list.'
      call do_popup4
      allmemsc = 0
      allmems = strip(allmems)
      if length(allmems) < 32000
      then do
        allmemsc = allmemsc + 1
        interpret 'allmems'allmemsc '= allmems'
        'vput (allmems'allmemsc')'
      end
      else do forever
        allmemsc = allmemsc + 1
        if length(allmems) > 32000
        then lp = lastpos(' ',allmems,length(allmems)-32000)
        else lp = 0
        if lp > 0
        then do
          interpret 'allmems'allmemsc '=' substr(allmems,lp)
          allmems = left(allmems,lp-1)
        end
        else do
          interpret 'allmems'allmemsc '= allmems'
          allmems = null
        end
        'vput (allmems'allmemsc')'
        if strip(allmems) = null then leave
      end
      'vput (allmemsc)'
      x = debug('ISPF Stats comparison complete:' string)
      return string
    end
    Otherwise nop  /* should never get here */
  end

  /* -------------------------------------------- *
  | Check to see if the provided filepath exists |
  | rc 0 it does                                 |
  | rc 20 it does not                            |
  * -------------------------------------------- */
Check_Stats_File:
  address syscall 'lstat' filepath 'file.'
  if file.0 = 0 then do
    ADDRESS ISPExec
    return 20
  end
  else return 0


  /* ----------------------------------------------------- *
  | Get the users current OMVS enviornment for use in the |
  | bpxwunix commands.                                    |
  * ----------------------------------------------------- */
GETENV:
  cmd = 'pwd'
  omvsenv.1 = '_BPX_SHAREAS=MUST'
  omvsenv.0 = 1
  x = bpxwunix(cmd,,so.,se.,omvsenv.)
  home    = strip(so.1)

  x = debug('Starting collection of env variables')

  cmd  = docmdx('env')

  rc = bpxwunix(cmd,,env.,se.,omvsenv.)
  envc = env.0
  call add_env '_BPX_SHAREAS=MUST'
  call add_env '_BPX_SPAWN_SCRIPT=YES'
  call add_env 'EXPORT _EDC_ADD_ERRNO2=1'
  call add_env '_EDC_ZERO_RECLEN=Y'
  env.0 = envc

docmdx:
  /* quircky thing, we need to export HOME as we are
  not running a login shell via bpxwunix */
  parse arg cmd
  drop o. se.
  if gitenv /= null
  then envfile = '.' gitenv ' >/dev/null 2>&1 &&'
  else envfile = null

  /* check for users .profile */
  address syscall 'lstat' "'"home"/.profile'" 'x.'
  if x.0 > 0 then home_profile =  ". "home"/.profile &&"
  else home_profile = null

  rx = 'export HOME='home' && . /etc/profile > /dev/null 2>&1 && ' ,
    home_profile envfile
  r = rx ' ' cmd
  return r

  /* -------------------- *
  | Add info to env stem |
  * -------------------- */
add_env:
  parse arg env_val
  envc = envc + 1
  env.envc = env_val
  return

docmd:
  parse arg cmd
  drop so. se.
  x = bpxwunix(cmd,,so.,se.,env.)
  return x

  /* ----------------------------- *
  | Write out the ISPF Stats file |
  * ----------------------------- */
Write_Stats:
  call syscalls 'ON'
  address syscall
  /* Fill dsn file with the comments */
  /* look like the 'open' command does the escaping for us... */
  fpok = strreplace(filepath,'\$', '$')
  'open' fpok O_rdwr+O_creat+O_trunc 660
  if retval = -1 then do
    Address ISPExec
    zs1 = "Something bad when creating"
    zs2 = filepath
    zs4 = 'Press F3 to close this popup and exit.'
    parse value '' with zs3
    call do_popup4
    'close' fd
    call syscalls 'OFF'
    return
  end
  fd = retval
  do is = 1 to mem.0
    call write_fd mem.is
  end
  'close' fd
  call syscalls 'OFF'
  Address ISPExec
  return

  /* ----------------------------------- *
  | Routine to write out a line of data |
  * ----------------------------------- */
Write_FD:
  parse arg string
  string = string || ESC_N
  'write' fd 'string' length(string)
  return

  /* ----------------------------------- *
  | Issue popup - turn off pfshow if on |
  * ----------------------------------- */
Do_Popup4:
  call pfshow 'off'           /* make sure pfshow is off */
  'Control Display Lock'
  'Addpop row(4) column(6)'
  'Display Panel(zigipop4)'
  'Rempop'
  call pfshow 'reset'         /* restore pfshow setting */
  return

  /* -------------------------------- *
  | routine to turn off pfshow if on |
  * -------------------------------- */
pfshow:
  if zpfshow = 'OFF' then return
  arg pfkopt
  if pfkopt = 'RESET' then do
    if pfkeys = 'ON' then
    'select pgm(ispopf) parm(FKA,ON)'
  end
  if pfkopt = 'OFF' then do
    'vget (zpfshow)'
    pfkeys = zpfshow
    if pfkeys /= 'OFF' then
    'select pgm(ispopf) parm(FKA,OFF)'
  end
  return

debug:
  if zigidebg  = 1 then do
    parse arg msg
    msg = Date() Time()' : 'msg
    c = 'echo "'msg'" >>' debugfil
    x = bpxwunix(c,,dso.,dse.)
  end
  return 0

usssafe:
  parse arg safedsn
  if pos('$',safedsn) = 0 then return safedsn
  safe$pos = 1
  do forever
    pos$safe = pos('$',safedsn,safe$pos)
    if pos$safe < 1 then return safedsn
    left$safe = left(safedsn,pos$safe-1)
    right$save = substr(safedsn,pos$safe)
    safedsn = left$safe'\'right$save
    safe$pos = pos$safe + 2
  end
  return safedsn

  /* ---------------------------------- *
  | Make the z/OS dsname safe for OMVS |
  * ---------------------------------- */
oldsafe: procedure
  parse arg dsn
  if pos('$',dsn) = 0 then return dsn
  /* Let's not usssafe it twice :) */
  if pos('\$',dsn) > 0 then return dsn
  dsn = strreplace(dsn, '$', '\$')
  return dsn

STRREPLACE:
  ORIGINAL = ARG(1)
  OLDTXT = ARG(2)
  NEWTXT = ARG(3)
  /* YOU CAN CHANGE THE BELOW KEY (TMPTXT), WHICH IS USED AS A TEMPORARY
  POINTER TO IDENTIFY THE TEXT TO BE REPLACED */
  TMPTXT = '6A53CD2EW1F'
  NEWSTR = ORIGINAL
  DO WHILE POS(OLDTXT,NEWSTR) > 0
    NEWSTR = SUBSTR(NEWSTR, 1 , POS(OLDTXT,NEWSTR)-1) ||,
      TMPTXT || SUBSTR(NEWSTR, POS(OLDTXT,NEWSTR) + LENGTH(OLDTXT))
  END
  DO WHILE POS(TMPTXT,NEWSTR) > 0
    NEWSTR = SUBSTR(NEWSTR, 1 , POS(TMPTXT,NEWSTR)-1) ||,
      NEWTXT || SUBSTR(NEWSTR, POS(TMPTXT,NEWSTR) + LENGTH(TMPTXT))
  END
  RETURN NEWSTR
